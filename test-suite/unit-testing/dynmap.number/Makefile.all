# This makefile runs the toy example
# vim:ts=3:noet
#
# George Foster
#
# Technologies langagieres interactives / Interactive Language Technologies
# Institut de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2006, Sa Majeste la Reine du Chef du Canada /
# Copyright 2006, Her Majesty in Right of Canada


MAP_TYPE ?= prefixNumber

all: test

toy.pdf: toy.tex
	pdflatex -interaction=batchmode toy.tex
	pdflatex -interaction=batchmode toy.tex

doc: toy.pdf

.PHONY: clean tokenize align lowercase split lm tm cow rat translate rescore test all

PORTAGE ?= /home/portage
SOURCE_DIR ?= ${PORTAGE}/test-suite/toy
vpath hans%.txt ${SOURCE_DIR}

clean:
	rm -f *.aux *.log *.tok *.al *.lc lines.*
	rm -f ibm[12].* phrases.*
	rm -f train_en.lm
	rm -f canoe.ini.* powellweights.* rescore-results* *.FILT log.*
	rm -f multi.probs.dev1_fr.al.30.FILT.gz
	rm -rf foos tmp
	rm -rf workdir-dev2_fr.al-100best workdir-test_fr.al-100best
	rm -f *.tmp* dev*.al.* test*.al.* rat rescore-model
	rm -f *.out *.bleu

txtfiles := $(shell cd ${SOURCE_DIR} && ls hans*.txt)

tokenize: $(txtfiles:%.txt=%.tok)

%_en.tok: %_en.txt
	tokenize.pl -lang=en $< $@
%_fr.tok: %_fr.txt
	tokenize.pl -lang=fr $< $@


align: $(txtfiles:%.txt=%.al)

%_fr.al %_en.al: %_en.tok %_fr.tok
	ssal -f $*_en.tok $*_fr.tok
	mv $*_en.tok.al $*_en.al
	mv $*_fr.tok.al $*_fr.al

lowercase: $(txtfiles:%.txt=%.lc)

%.lc: %.al
	lc-latin.pl $< $@

split: train_en.al train_fr.al

totalsize = $(shell cat $(txtfiles:%.txt=%.lc) | wc -l)
devtestsize = 100
trainsize = $(shell perl -e "print $(totalsize) / 2 - 3 * $(devtestsize)")

train_%.al: $(txtfiles:%.txt=%.lc)
ifndef txtfiles
	@echo No text files to process.
	@echo This directory must contain some parallel text files before you start.
	@exit 1
else
	rm -f lines.$*; touch lines.$*
	echo "$(trainsize)  train_$*.al" >> lines.$*
	echo "$(devtestsize) dev1_$*.al" >> lines.$*
	echo "$(devtestsize) dev2_$*.al" >> lines.$*
	echo "$(devtestsize) test_$*.al" >> lines.$*
	cat *_$*.lc | split-listed.pl lines.$*
endif

lm: train_en.lm
train_en.lm: train_en.al
	ngram-count -interpolate -kndiscount -order 3 -text $< -lm $@

number: train_en.lm.${MAP_TYPE}
train_en.lm.${MAP_TYPE}: train_en.al
	cat $< \
	| map_number -map ${MAP_TYPE} \
	| ngram-count -interpolate -kndiscount -order 3 -text - -lm $@

tm: phrases.fr2en
phrases.fr2en: train_en.al train_fr.al
	rm -rf tmp; mkdir tmp
	ln -s ../train_en.al tmp/train_en.al
	ln -s ../train_fr.al tmp/train_fr.al
	train-phrases.sh -no-z tmp

canoe.ini: phrases.fr2en train_en.lm train_en.lm.${MAP_TYPE}
	@echo "[ttable-multi-prob] phrases.fr2en" > $@
	@echo "[lmodel-file] train_en.lm:DynMap;${MAP_TYPE};train_en.lm.${MAP_TYPE}" >> $@
	@echo "[ttable-limit] 30" >> $@
	@echo "[ttable-threshold] 0.000" >> $@
	@echo "[stack] 70" >> $@
	@echo "[beam-threshold] 0.01" >> $@
	@echo "[distortion-limit] 7" >> $@

cow: canoe.ini.cow
canoe.ini.cow: canoe.ini
	rm -rf foos; mkdir foos
	cow.sh -nbest-list-size 100 -maxiter 10 -filt -floor 2 \
		-workdir foos dev1_fr.al dev1_en.al &> log.cow

rescore-model.ini:
	configtool rescore-model:ffvals $< > $@
	echo "IBM2TgtGivenSrc:ibm2.en_given_ch.gz" >> $@
	echo "IBM2SrcGivenTgt:ibm2.ch_given_en.gz" >> $@
	echo "IBM1WTransTgtGivenSrc:ibm1.en_given_ch.gz" >> $@
	echo "IBM1WTransSrcGivenTgt:ibm1.ch_given_en.gz" >> $@
	echo "IBM1DeletionSrcGivenTgt:ibm1.fr_given_en#0.2" >> $@
	echo "IBM1DeletionTgtGivenSrc:ibm1.en_given_fr#0.2" >> $@
	echo "IBM1SrcGivenTgt:ibm1.fr_given_en" >> $@
	echo "IBM1TgtGivenSrc:ibm1.en_given_fr" >> $@
	echo "ParMismatch" >> $@
	echo "LengthFF" >> $@
	echo "nbestNgramPost:1#1#<ffval-wts>#<pfx>" >> $@
	echo "nbestNgramPost:2#1#<ffval-wts>#<pfx>" >> $@
	echo "nbestPhrasePostSrc:1#<ffval-wts>#<pfx>" >> $@
	echo "nbestPhrasePostTgt:1#<ffval-wts>#<pfx>" >> $@
	echo "nbestSentLenPost:1#<ffval-wts>#<pfx>" >> $@
	echo "nbestWordPostLev:1#<ffval-wts>#<pfx>" >> $@
	echo "nbestWordPostSrc:1#<ffval-wts>#<pfx>" >> $@
	echo "nbestWordPostTrg:1#<ffval-wts>#<pfx>" >> $@

rat: rescore-model
rescore-model: canoe.ini.cow
	rat.sh -n 1 train -n 1 -f $< -K 100 -o $@ \
		rescore-model.ini dev2_fr.al dev2_en.al &> log.rat

translate: canoe_ON_test_fr.out
canoe_ON_test_fr.out: canoe.ini.cow
	canoe -f $< < test_fr.al > $@

rescore: rescore_ON_test_fr.out
rescore_ON_test_fr.out: rescore-model
	rat.sh -n 1 trans -v -n 1 -f canoe.ini.cow -K 100 $< test_fr.al
	mv test_fr.al.rat $@

test: rescore_ON_test_fr.bleu canoe_ON_test_fr.bleu
%.bleu: %.out
	bleumain $< test_en.al > $@

bootstrap: rescore_ON_test_fr.out canoe_ON_test_fr.out
	bleucompare $^ REFS test_en.al



lm_eval.test.txt:
	echo 1111 > $@
	echo 37 >> $@
	echo 123.978 >> $@
	echo 16 >> $@
	echo bid >> $@

dynmap_test: lm_eval.test.txt train_en.lm train_en.lm.${MAP_TYPE}
	lm_eval -v train_en.lm lm_eval.test.txt
	lm_eval -v 'DynMap;${MAP_TYPE};train_en.lm.${MAP_TYPE}' lm_eval.test.txt
