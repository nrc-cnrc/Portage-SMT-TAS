Technologies langagieres interactives / Interactive Language Technologies
Institut de technologie de l'information / Institute for Information Technology
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2010, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2010, Her Majesty in Right of Canada

Distributed under specific licensing terms.  Please refer to your signed
license agreement for details.


                  PORTAGEshared small voc regression suite

This small vocabulary regression corpus was generated by Howard Johnson.

It was created using a stripped-down version of the WPT 2005 system.  Training
and test sentences were picked from each WPT task where the English sentences
were made up only of the 1000 most frequent words in the English half.  The
resulting BLEU score is around 30. The entire training and testing process
takes about 50 minutes to run.  We typically use this test suite for regression
testing.

In the PORTAGEshared distribution, this directory contains both the data and
the code for the regression test suite, but the two may be separated.  All
scripts expect to find the data (the corpus in subdirectory lc/, and the
language model file europarl.en.srilm) in directory
$PORTAGE/test-suite/regress-small-voc.

Data source:
 - The corpora found in subdirectory lc/ are extracted from the corpora
   distributed by Philipp Koehn and Christof Monz for the shared tasked of the
   WPT workshop at ACL 2005.  The extracted files follow the naming convention
   of the original files, which can be found at
   http://www.statmt.org/wpt05/mt-shared-task/.  They originally come from the
   Eurparl corpus (http://people.csail.mit.edu/koehn/publications/europarl/)
   prepared by Philipp Koehn.  

 - The language model, europarl.lm.srilm, was also supplied for this shared
   task and also comes from the Europarl corpus.

Usage:

This test script can be run in two ways: 1) type "run_all.sh <languages>" or 2)
"run_minimum.sh <languages>", where <languages> may be one or more of fr, de,
es, and fi.  run_minimum will call the core scripts of the test suite in the
correct order, for all the languages you selected, while run_all.sh will
execute all scripts.  You can also run individual scripts by invoking them
directly with your <languages> choice.  Scripts numbered below 20 (those called
by run_minimum) are sequentially dependent on each other, and therefore must be
run in order.  Those numbered 20 and up only depend on those below 20 and can
be run in any order once run_minimum.sh has been run.

Since these scripts are more intended for testing that demonstrating the code,
they are not very well documented.  It is recommended that you read the main
PORTAGEshared documentation first.  The output of these scripts ends up in many
logs and files in subdirectories called wk_<language>, and in times_minimum.txt
or times_all.txt.  When we want to do regression testing for some code change,
we typically run the test suite twice, and do a recursive diff on the resulting
wk_<language> directories.  This usually yields many differences, so manual
analysis is unfortunately required to determine if they are desirable
differences or not.

List of scripts:
  Basic test suite executed by run_minimum.sh:
    02_train_ibm.pl       - build IBM translation tables
    03_gen_phr.pl         - build phrase tables
    05_cow.pl             - COW, optimize canoe weights
    10_rat_train.pl       - train the rescoring model
    11_rat_test.pl        - test using the rescording model
    18_summary.pl         - summarize bleu scores on dev/test, 1-best/rescore.
 
  More extensive test suite: run_all.sh executes the above plus:
    20_canoe.pl           - simple decoding run
    21_sanity.pl          - "test" on dev, to make sure things work ok
    22_gen_phr.pl         - variants on phrase table building
    25_cow_ext.pl         - variants on cow
    30_rtrain_ebsc.pl     - train the rescoring model with the
                            expectation-based stopping criterion
    31_rtrain_rnd_w.pl    - test the random weight distribution specs
    35_adaptation.pl      - test the LM and TM adaptation training
    40_phrase_tm_align.pl - test phrase_tm_align
    50_filter_models.pl   - test the various modes of filter_models
    61_canoe_cube.pl      - test the cube pruning decoder
    62_cow_cube.pl        - test COW with cube pruning
 
