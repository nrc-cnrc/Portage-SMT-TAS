# @file rest/tests/basic_validation.yaml
# @brief Validates PortageLive REST API's handling of arguments for translate.
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2016, Sa Majeste la Reine du Chef du Canada /
# Copyright 2016, Her Majesty in Right of Canada


# https://learnxinyminutes.com/docs/yaml/

name: "Exercice validating the parameters."

globals:
  variables:
    service: "{base_url}/language/translate/v3.php"

testSteps:
  - name: "No query"
    method: "get"
    apiUrl: "{service}"
    asserts:
      headers:
        status: 404
        Content-Type: "application/json"
      payload:
         error: "Object"
         error.message: "String"
         error.message: "There is no query."


  - name: "No target"
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      prettyprint: false
      q: "home"
    asserts:
      headers:
        status: 404
        Content-Type: "application/json"
      payload:
         error: "Object"
         error.message: "String"
         error.message: "You need to provide a target using target=X."


  - name: "Empty target"
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      target: ""
      prettyprint: false
      q: "home"
    asserts:
      headers:
        status: 404
        Content-Type: "application/json"
      payload:
         error: "Object"
         error.message: "String"
         error.message: "You need to provide a target using target=X."


  - name: "There should be a query."
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: false
    asserts:
      headers:
        status: 404
        Content-Type: "application/json"
      payload:
         error: "Object"
         error.message: "String"
         error.message: "You need to provide a query using q=X."


  - name: "Generating a SOAPFault with an invalid context/key."
    method: "get"
    apiUrl: "{service}"
    params:
      key: "invalid_context"
      target: "fr"
      prettyprint: false
      q: "home"
    asserts:
      headers:
        status: 404
        Content-Type: "application/json"
      payload:
         error: "Object"
         error.type: "String"
         error.type: "PortageContext"
         error.message: "String"
         error.message: 'exec value.strip() == "Context \"invalid_context.en-fr\" does not exist."'


  - name: "Translate not pretty printed"
    apiUrl: "{service}"
    method: "get"
    raw: true
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: false
      q: "home"
    asserts:
      headers:
        status: 200
        Content-Type: "application/json"
      payload:
        __raw__: '{"data":{"translations":[{"translatedText":"emoh"}]}}'


  - name: "Translate pretty printed"
    method: "get"
    apiUrl: "{service}"
    raw: true
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: true
      q: "home"
    asserts:
      headers:
        status: 200
        Content-Type: "application/json"
      payload:
        __raw__: |
         {
             "data": {
                 "translations": [
                     {
                         "translatedText": "emoh"
                     }
                 ]
             }
         }


  - name: "We should not get any warning when all parameters are valid."
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: false
      q: "home"
    asserts:
      headers:
        status: 200
        Content-Type: "application/json"
      payload:
         data: "Object"
         data.translations: "Array"
         data.translations._length: 1
         data.translations[0]: "Object"
         data.translations[0].translatedText: "String"
         data.translations[0].translatedText: "emoh"
         warning: "exec not value"


  - name: "Using an invalid option should result in translation + warnings."
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: false
      q: "home"
      option: "invalid"
    asserts:
      headers:
        status: 200
        Content-Type: "application/json"
      payload:
         data: "Object"
         data.translations: "Array"
         data.translations._length: 1
         data.translations[0]: "Object"
         data.translations[0].translatedText: "String"
         data.translations[0].translatedText: "emoh"
         warnings: "Array"
         warnings[0]: "Object"
         warnings[0].message: "String"
         warnings[0].message: "You used invalid options"
         warnings[0].options: "Array"
         warnings[0].options._length: 1
         warnings[0].options[0]: "option=invalid"


  - name: "Using multiple invalid options should result in translation + warnings."
    method: "get"
    apiUrl: "{service}"
    params:
      key: "unittest.rev"
      target: "fr"
      prettyprint: false
      q: "home"
      option: "invalid"
      bad: "unavailable"
    asserts:
      headers:
        status: 200
        Content-Type: "application/json"
      payload:
         data: "Object"
         data.translations: "Array"
         data.translations._length: 1
         data.translations[0]: "Object"
         data.translations[0].translatedText: "String"
         data.translations[0].translatedText: "emoh"
         warnings: "Array"
         warnings[0]: "Object"
         warnings[0].message: "String"
         warnings[0].message: "You used invalid options"
         warnings[0].options: "Array"
         warnings[0].options._length: 2
         warnings[0].options[0]: "String"
         warnings[0].options[0]: "bad=unavailable"
         warnings[0].options[1]: "String"
         warnings[0].options[1]: "option=invalid"
