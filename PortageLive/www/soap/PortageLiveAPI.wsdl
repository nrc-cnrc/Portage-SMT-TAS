<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="wsdl-viewer.xsl"?>
<definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://__REPLACE_THIS_WITH_YOUR_IP__/PortageLiveAPI.wsdl" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" name="PortageLiveService" targetNamespace="http://__REPLACE_THIS_WITH_YOUR_IP__/PortageLiveAPI.wsdl">
  <!-- Understanding WSDL: http://msdn.microsoft.com/en-us/library/ms996486.aspx -->
  <!-- http://www.w3.org/TR/wsdl20 -->
  <documentation>
    file: PortageLiveAPI.wsdl
    brief: Definition of the API to the Portage SMT software suite.
    author: Patrick Paul, Eric Joanis and Samuel Larkin

    Technologies langagières interactives / Interactive Language Technologies
    Technologies de l'information et des communications / Information and Communications Technologies
    Conseil national de recherches Canada / National Research Council Canada
    Copyright 2009 - 2013, Sa Majesté la Reine du Chef du Canada /
    Copyright 2009 - 2013, Her Majesty in Right of Canada
  </documentation>
  <!-- ============================================================
                         M E S S A G E S
============================================================ -->
  <message name="primeModelsRequest">
    <part name="context" type="xsd:string"/>
    <part name="PrimeMode" type="xsd:string"/>
  </message>
  <message name="getAllContextsRequest">
    <part name="verbose" type="xsd:boolean"/>
  </message>
  <message name="getTranslationRequest">
    <part name="srcString" type="xsd:string"/>
    <part name="newline" type="xsd:string"/>
    <part name="xtags" type="xsd:boolean"/>
  </message>
  <message name="getTranslationResponse">
    <part name="Result" type="xsd:string"/>
  </message>
  <message name="translationToken">
    <part name="token" type="xsd:string"/>
  </message>
  <message name="getTranslation2Request">
    <part name="srcString" type="xsd:string"/>
    <part name="context" type="xsd:string"/>
    <part name="newline" type="xsd:string"/>
    <part name="xtags" type="xsd:boolean"/>
  </message>
  <message name="translateFileCERequest">
    <part name="ContentsBase64" type="xsd:string"/>
    <part name="Filename" type="xsd:string"/>
    <part name="context" type="xsd:string"/>
    <part name="CETreshold" type="xsd:decimal"/>
    <part name="xtags" type="xsd:boolean"/>
  </message>
  <!-- ============================================================
                      P O R T   T Y P E S
============================================================ -->
  <portType name="PortageLive_Interface">
    <operation name="primeModels">
      <documentation>
        For a given context, load its models in memory according to PrimeMode.

        Legal value for PrimeMode are "partial" and "full".
        Recommended use: call this method with "partial" before the first time
        you use a given context, or after it's been left unused for a long
        time.  This will normally result in faster response times afterwards.

        Priming is accomplished by calling the prime.sh script installed with
        the context on the server.  The default prime.sh uses PrimeMode to
        partially (partial) or fully (full) load the models in memory.  The
        actual behaviour of this function can be customized on the server side
        if desired.

        Throws SoapFault in case of problems.
        Possible faultcode values:
         - PortageContext: the context is not valid.
         - PortagePrimeError: the prime.sh script failed.
         - PortageNoPrimeScript: the context exists but doesn't have a prime.sh script.
         - otherwise some other problem occurred, e.g., a protocol or connection
           error, normally described by the faultcode and explained by the faulstring.
      </documentation>
      <input message="tns:primeModelsRequest"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="getAllContexts">
      <documentation>
        Get the list of contexts installed on the PortageLive server.

        If verbose is true, each context includes a short description.
        If verbose is false, only the name of each context is provided.
        In all cases, the results are provided in a semi-colon separated list.
        See the overall PortageLive_Service documentation for more details
        about contexts.

        Throws a SoapFault exception in case of a protocol or connection error.
      </documentation>
      <input message="tns:getAllContextsRequest"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="getTranslation">
      <documentation>
        Same as getTranslation2(), but using the default context.  See
        getTranslation2() for documentation.
      </documentation>
      <input message="tns:getTranslationRequest"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="getTranslation2">
      <documentation>
        Translate text using the specified context.

        Arguments:
         - srcString is the sentence to translate.
         - context is the name of the system to use to translate the document, and
           must match one of the context names returned by getAllContexts().
         - newline indicates the interpretation that should be given to newline
           characters in srcString, and must be one of:
            - "w": newline characters are just whitespace and should be replaced by
              spaces; an empty line marks a paragraph boundary; sentence splitting
              is performed within each paragraph; the result will have one
              translated sentence per line with an empty line after each paragraph.
            - "p": newline characters mark paragraph boundaries; sentence splitting
              is performed within each paragraph for translation but the paragraphs
              are reconstructed in the output; the result will have one translated
              paragraph per line, matching srcString line by line.
            - "s": newline characters mark sentence boundaries; no sentence splitting
              will be performed; the result will have one translated sentence per
              line, matching srcString line by line.
         - xtags: if true, XMLish tags (typically representing markup in the
           original document, as some translation memory software does) will be
           transferred into the translation using our tag transfer module.

        Throws SoapFault in case of problems.
        Possible faultcode values:
         - PortageContext: the problem is with the context;
         - PortageBadArgs: newline is not one of {s, p, w};
         - PortageServer: the problem is with Portage server;
         - otherwise some other problem occurred, normally described by the
           faultcode and explained by the faulstring.
      </documentation>
      <input message="tns:getTranslation2Request"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="getTranslationCE">
      <documentation>
        Translate text using the specified context, and calculate confidence scores
        on the translation.  The result is the translation, one sentence per line,
        with the confidence score preceeding each translation, separated by a tab
        character.  Note that blank lines in the input will also get a confidence
        score in the output; this score is meaningless and should be ignored.

        See getTranslation2() for argument and SoapFault documentation, with the
        following exceptions:
         - the newline="p" mode does not currently work correctly with confidence
           estimation: the confidence scores will not be attached to the right
           sentence.  Use "s" or "w" only.
         - a SoapFault with faultcode="PortageContext" will also be thrown if the
           context does not support confidence estimation.
      </documentation>
      <input message="tns:getTranslation2Request"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="translateTMXCE">
      <documentation>
        Submit a request to translate a TMX file using the specified context.

        Arguments:
         - context must be a valid context identifier as returned by getAllContexts().
         - TMXContentsBase64 is the contents of the TMX file in base64 encoding.
         - TMXFilename is the name of the TMX file.
         - IF CETreshold is greater than 0, confidence estimation is used to
           filter out translations with confidence score below the threshold
           (valid values are between 0 and 1).
         - If xtags is true, tags in the source sentences are transfered to the
           target sentences.

        Returns a token used to monitor the job.  The token can be used in one of
        two ways: it is a URL you can use to interactively monitor the job in a
        browser.  Or you can pass it as argument to translateTMXCE_Status().

        Throws SoapFault in case of problems.
        If the faultcode is "PortageContext", the problem is with the context
        (including the case where the context does not support confidence
        estimation and CETreshold&gt;0),
        if it is "PortageServer", the problem is with PortageLive server,
        otherwise some other problem occurred, normally described by the
        faultcode and explained by the faulstring.
      </documentation>
      <input message="tns:translateFileCERequest"/>
      <output message="tns:translationToken"/>
    </operation>
    <operation name="translateTMXCE_Status">
      <documentation>
        Get the status of a job submitted using translateTMXCE().

        token must be the token returned by a previous call to translateTMXCE().

        Returns a string containing a one digit code followed by a human readable
        description of the status.
        Valid codes are:
         - 0: job completed successfully,
         - 1: job in progress,
         - 2: job finished but failed,
         - 3: something is wrong with the token.

        If the code is 0, the result string will be "0 Done: result_url", where
        result_url is the URL where you can fetch the translated TMX via HTTP.
        If the code is 1, the result string will include an indication of progress.
        If the code is 2, the result string will be "2 Failed: trace_url", where
        trace_url will let you see the error log for your job.

        If you are going to poll a job status repeatedly, it is recommended you
        insert a 5 second delay between successive requests.

        Throws a SoapFault exception in case of a protocol or connection error.
      </documentation>
      <input message="tns:translationToken"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="translateSDLXLIFFCE">
      <documentation>
        Does the same thing as translateTMXCE(), but for SDLXLIFF file.
        See the documentation of translateTMXCE() for details.
      </documentation>
      <input message="tns:translateFileCERequest"/>
      <output message="tns:translationToken"/>
    </operation>
    <operation name="translateSDLXLIFFCE_Status">
      <documentation>
        Works the same as translateTMXCE_Status(), accepting the token returned
        by translateSDLXLIFFCE().
        See the documentation of translateTMXCE_Status() for details.
      </documentation>
      <input message="tns:translationToken"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
    <operation name="translatePlainTextCE">
      <documentation>
        Does the same thing as translateTMXCE(), but for SDLXLIFF file.
        See the documentation of translateTMXCE() for details.
      </documentation>
      <input message="tns:translateFileCERequest"/>
      <output message="tns:translationToken"/>
    </operation>
    <operation name="translatePlainTextCE_Status">
      <documentation>
        Works the same as translateTMXCE_Status(), accepting the token returned
        by translateSDLXLIFFCE().
        See the documentation of translateTMXCE_Status() for details.
      </documentation>
      <input message="tns:translationToken"/>
      <output message="tns:getTranslationResponse"/>
    </operation>
  </portType>
  <!-- ============================================================
                         B I N D I N G S
============================================================ -->
  <binding name="PortageLive_SoapHttpBinding" type="tns:PortageLive_Interface">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="primeModels">
      <soap:operation soapAction="primeModels"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="getAllContexts">
      <soap:operation soapAction="getAllContexts"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="getTranslation">
      <soap:operation soapAction="getTranslation"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="getTranslation2">
      <soap:operation soapAction="getTranslation2"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="getTranslationCE">
      <soap:operation soapAction="getTranslationCE"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translateTMXCE">
      <soap:operation soapAction="translateTMXCE"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translateTMXCE_Status">
      <soap:operation soapAction="translateTMXCE_Status"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translateSDLXLIFFCE">
      <soap:operation soapAction="translateSDLXLIFFCE"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translateSDLXLIFFCE_Status">
      <soap:operation soapAction="translateSDLXLIFFCE_Status"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translatePlainTextCE">
      <soap:operation soapAction="translatePlainTextCE"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
    <operation name="translatePlainTextCE_Status">
      <soap:operation soapAction="translatePlainTextCE_Status"/>
      <input>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </input>
      <output>
        <soap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="urn:cnrc-nrc:portageliveservice" use="encoded"/>
      </output>
    </operation>
  </binding>
  <!-- ============================================================
                         S E R V I C E
============================================================ -->
  <service name="PortageLive_Service">
    <documentation>
      Definition of the PortageLive Service, providing an API to the PortageII
      software suite.

      Typical usage: call getAllContexts() to obtain the list of trained
      systems available on the server, and then call getTranslation2() for each
      unit of text you need to translate.

      The context embeds a number of parameters that are configured on the
      server when the system is trained, and not directly accessible to the
      client: source and target language, training data and all training
      options, etc.  It is recommended that meaningful names be used when
      installing systems ("contexts") on the server, e.g., indicating at
      least the domain and the language direction.

      The client software can obtain the list of contexts by calling
      getAllContexts().  The non-verbose mode is meant for machine
      processing, listing just the contexts installed on the server, while
      the verbose mode adds human-readable details such as language
      direction and whether confidence estimation is available. (See
      getTranslationCE()).

      To translate text, call getTranslation2() with the desired
      context.  getTranslation() does the same thing, using the default
      context on the server.
      In both cases, srcString is the raw text to be translated.  It should
      be plain text, optionally with markup.  The text will be split in
      sentences and translated.  The result will respect the paragraph
      structure specified by the newline parameter.

      See individual function documentation for further details.

      &lt;b>Simple usage example&lt;/b>

      You are about to submit a series of requests to a particular system, for
      text where newline characters delimit paragraphs.  The context name
      is provided to you by the server administrator.
      Before the series of requests starts:
      primeModels(context, "partial");
      loop: getTranslation2(srcText, context, "p", false);

      &lt;b>Constraints&lt;/b>
      &lt;b>Time-out issues&lt;/b>: because the SOAP API calls are made through the HTTP
      protocol, any time-out in the chain could cause the result to be lost:
      Apache server time-out, browser or other client time-out, etc.  If
      you're submitting large amounts of text for translation that might
      exceed typical time-outs, you should split the input into smaller
      chunks, e.g., paragraphs, and make several calls to getTranslation2().
      Asynchronous methods exist for translating TMX and XLIFF files, but
      not yet for plain text.

      &lt;b>Performance issues&lt;/b>: typical systems run on the order of one sentence
      per second per CPU.  Adequate server capacity should be secured for the
      volume of translation required.
      Some parameters can be tweaked at training time to speed up translation,
      in a trade-off with translation quality.

    </documentation>
    <port name="PortageLive_Library" binding="tns:PortageLive_SoapHttpBinding">
      <soap:address location="http://__REPLACE_THIS_WITH_YOUR_IP__/PortageLiveAPI.php"/>
    </port>
  </service>
</definitions>
