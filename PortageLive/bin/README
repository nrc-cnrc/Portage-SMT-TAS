Traitement multilingue de textes / Multilingual Text Processing
Centre de recherche en technologies num√©riques / Digital Technologies Research Centre
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2018, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2018, Her Majesty in Right of Canada


                                PortageLive
                     PortageII runtine software layout

This directory includes scripts that can help you reproduce the structure we
use to package the PortageII software for PortageLive virtual appliances.
Detailed instructions are in the PortageLive Manual part of the PortageII
User Manual.

In this directory:

Make sure you have compiled and installed PortageII already, and set the
path properly by calling $PORTAGE/SETUP.bash.

Prepare the bin layout
======================

Run
   make
or
   make DO_EXTERNAL_LIBS=1
to create the rpm.build.root hierarchy.  The files placed in that directory
reproduce the location where files are to be installed on the translation
server, as is normally done with RPMs.  The second variant tries to include all
relevant shared libraries in the result.

Then, either copy the files manually to your translation server, if you have
just one physical server, or build the RPM by running ../scripts/make-rpm.sh if
you are using virtual appliances.

Python 2.7
==========

Once you've copied or installed the bin layout, you must make sure PortageLive
will find Python 2.7. As mentioned in INSTALL in the top-level directory of
PortageII, the recommended installation procedure is to symlink python and its
libraries into /opt/PortageII/bin and lib:
   ln -s /PATH_TO/python2.7.x/bin/python /opt/PortageII/bin/python
   ln -s /PATH_TO/python2.7.x/lib/libpython2.7.so* /opt/PortageII/lib/

Perl 5.22
==========

Once you've copied or installed the bin layout, you must make sure PortageLive
will find Perl-5.22. As mentioned in INSTALL in the top-level directory of
PortageII, the recommended installation procedure is to symlink perl into
/opt/PortageII/bin:
   ln -s /PATH_TO/perl-5.22.0/bin/perl /opt/PortageII/bin/perl

Warnings for other compiled dependencies
========================================
  We have previously mentionned having to symbolic link Perl & Python into
  /opt/PortageII/{bin,lib}.  Be aware that, if you had to compile some other
  dependencies to get PortageII running, you might also have to symbolic link
  them into /opt/PortageII the same way you did for Perl & Python.  This is due
  to the fact that PortageLice's web server runs in a more restrictive
  environment where it doesn't have access to all software and is limited to
  /opt/PortageII/{bin,lib}.

Installation
============

To copy the files to your PortageLive translation server, you can use rsync:
   rsync -arzv rpm.build.root/* root@<host>:/
or, locally:
   rsync -arv rpm.build.root/* /

Verifying Symlinks
==================

After making the copy, please make sure the following symlink was correctly
re-created:
   /opt/PortageII/lib/libstdc++.so -> libstdc++.so.<some digit, usually 6>
If not, fix it manually:
   cd /opt/PortageII/lib
   ln -s libstdc++.so.6 libstdc++.so

Permissions
===========

Make sure the apache process can access everything it needs to run PortageII:
it should have read access to all of /opt/PortageII, execute access to all
folders and programs therein, and write access to /opt/PortageII/logs/accounting.

The installation instructions provided above should have accomplished that
automatically, but if not, this will fix things:
   chmod -R o+rX /opt/PortageII
   chmod o+w /opt/PortageII/logs/accounting

Notes
=====

Note (1): the scripts work for us, but rely on details of how the OS is
installed, among other things.  You should expect to have to adjust the
procedure for your own environment.

Note (2): if your PortageLive machine (virtual or physical) has a different
operating system version, or a different Linux distro, than the machine where
PortageII was compiled, you might have some difficulties with shared libraries
(`.so` files).  If that is the case, you can try defining DO_EXTERNAL_LIBS=1 in
the Makefile, which will bundle some .so files along with PortageII.  Or else
try following this procedure on a machine that is more like your runtime
translation server(s).

Note (3): even with the same OS, you may need to do some work to get the ICU
.so files installed correctly.  DO_EXTERNAL_LIBS=1 might fix that (it does on
our systems), but if not, run "ldd `which canoe`" and make a copy of the .so
files related to ICU into rpm.build.root/opt/PortageII/lib.  Do the same for
any other .so files that the system can't find on your translation server.
On the translation server, running the command
   ldd /opt/PortageII/bin/* | grep "not found"
will tell you which .so files you need to install along with PortageLive.
