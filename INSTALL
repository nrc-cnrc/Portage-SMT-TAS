                               Portage_1.4.2

Technologies langagieres interactives / Interactive Language Technologies
Institut de technologie de l'information / Institute for Information Technology
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2010, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2010, Her Majesty in Right of Canada

Distributed under specific licensing terms.  Please refer to your signed
license agreement for details.


                           Installing Portage 1.4

We don't use autoconf, so the installation is done manually, but we tried to
keep it as simple as possible.

Copy the full contents of the CD to a directory of your choice, say
$HOME/Portage1.4.2.
   cp -prd /CDlocation $HOME/Portage1.4.2
or
   rsync -av /CDlocation $HOME/Portage1.4.2

Some users have reported needing to run "chmod +w" on some files or directories
after the cp or rsync above.  Running "chmod -R +w $HOME/Portage1.4.2" might
solve this problem.

If you chose a location other than $HOME/Portage1.4.2, edit SETUP.bash and
SETUP.tcsh and change the value of the PORTAGE variable to the actual location
where your installed Portage 1.4, and adjust the next steps below
accordingly.

Add $HOME/Portage1.4.2/{bin,lib,include} to the appropriate environment
variables by sourcing $HOME/Portage1.4.2/SETUP.bash or SETUP.tcsh (depending
on your preferred shell - if you use a shell other than bash or csh/tcsh,
you're on your own):
   source $HOME/Portage1.4.2/SETUP.bash
or
   source $HOME/Portage1.4.2/SETUP.tcsh

For source code distributions :

   Resolve any dependencies (see External dependencies, below).
   Review src/Makefile.user-conf and make any changes needed to reflect your
   system configuration and choices.
   Compile and install Portage 1.4:
      cd src
      make -j 5
      make -j 5 install
   We typically use -j N for parallel compiling.  N = 1 + the number of CPUs on
   the machine seems to be optimal.  If you're sharing the machine with many
   users, however, you may not want to use the -j switch at all.


                        Verifying your installation

Once Portage 1.4 is installed, execute the following command to make sure you can
run the software:
   make -C $HOME/Portage1.4.2/test-suite/unit-testing/check-installation
This script invokes programs that are each installed differently, and exercise
the key parts of Portage 1.4 installation.  If everything is OK, you should see
the following message: "Everything is correctly installed!" otherwise you will
get some indication of what could be missing or mis-configured.  Repeat the
command until you solved all errors.

If you get "command not found" for any of these, your PATH is not correctly set
or your installation failed.  Check your SETUP.bash/tcsh file and make sure you
are sourcing it properly, ideally in your .<shell>rc file.  Your $PATH variable
should include Portage1.4.2/bin.  Also check that Portage1.4.2/bin contains
tokenize.pl.  If that's not the case, "make install" probably didn't complete
successfully.

If tokenize.pl -h or ce.pl -h says "Can't locate <SomeFile>.pm in @INC ...",
then your PERL5LIB is not correctly set or your installation partially failed.
Check your SETUP.bash/tcsh file and make sure you are sourcing it properly,
ideally in your .<shell>rc file.  Your $PERL5LIB variable should include
Portage1.4.2/lib.  That directory should also contain LexiTools.pm and a
subdirectory called CE containing several .pm files.  If it doesn't, "make
install" probably didn't complete successfully.

If tmx2lfl.pl complains about not finding XML/Twig.pm, then XML::Twig is
missing or is not installed correctly; see External dependencies below.  You
can safely ignore this problem if you're not planning to work with TMX or TTX
files.

If canoe -h says "command not found" but the other two commands work:
 - with binary distributions, your $PATH variable must also include the
   architecture specific folder Portage1.4.2/bin/<arch>.  Check your
   SETUP.bash/tcsh file and make sure you have set the PRECOMP_PORTAGE_ARCH
   appropriately.  The Portage1.4.2/bin/<arch> directory contains all the
   compiled C++ executables.
 - with source distributions, canoe is installed in the same directory as
   cow.sh and tokenize.pl, so compilation probably failed if only canoe doesn't
   work.

Binary distributions only:
 - If canoe -h complains about a lib*.so* file not being found, some external
   dependency might be missing or you have the wrong version of a dynamic
   library.  An error about libstdc++.so, GLIBCXX or libgomp.so probably means
   your version of g++ is older than the one we used to compile Portage 1.4.
   You might need a newer version: you won't use the compiler, but you still
   need its dynamic libraries.  See the ICU section below if your get an error
   about libicu*.so.
 - If canoe -h says "cannot execute binary file", then we might not have built
   an executable compatible with your computing hardware.  Contact us.


                              Getting Started

Now you're ready to run the Portage 1.4 suite of programs.

We also provide a template experimental framework in subdirectory framework.
This is intended as a reasonable out-of-the-box baseline system.  We recommend
you use this framework as your starting point for real experiments.

In framework, you will also find the document framework-toy.pdf.  This document
walks you through a complete experiment using a toy corpus.  It is intended as
a tutorial to get you started with Portage 1.4.

For further documentation, see doc/user-manual.html.


                              Applying a patch

If you have already installed Portage 1.4 before and wish to upgrade to this
version, you can apply a patch instead of making a fresh copy, if a suitable
one is provided with your distribution:
   cd $HOME/Portage1.4.2
   patch -p2 < /CDlocation/OLD_REV_to_NEW_REV.patch

Use patches with care if you have made any changes to Portage 1.4!  Any changes
you made *should* be merged with changes we made between releases, but such
merging might lead to problems and/or conflicts, so it is strongly advised that
you work on a backup, and carefully read the patch man page to see how
conflicts are handled and how you can resolve them.


                           External dependencies

Before installing Portage 1.4 itself, you need to make sure you have the
following dependencies installed.

Mandatory dependencies for all distributions:

 - Linux - we have tested Portage 1.4 on various Linux distributions and it
   runs without problems, as long as the rest of the dependencies are
   installed.  We tested an older version of PORTAGEshared on PC-BSD and Mac OS
   X.  It worked reasonably well on those platforms then, but these are not our
   regular working platforms and we make no guarantees everything will work
   correctly.  Things also work reasonably well on Cygwin, but again we make no
   guarantees.  We have not tested on Solaris at all.

 - A large swap file.  Your system should be configured to have twice as much
   swap space as RAM, to avoid frustrating problems down the road.
   Insufficient swap space will sometimes cause crashes due to a "lack of
   memory" even though there appears to be plenty available.

 - Standard utilities: awk, bash (3.0 or more recent), bzip2, (e)grep, gzip,
   head, sed, sort, tail, tar, etc.

 - Perl 5.8.8 or more recent.  Version 5.8.5 is mostly usable, but some
   functionality involving XML files (in particular, TMX files) will not work
   with 5.8.5.

 - GNU make 3.81 - when compiling Portage 1.4 and when running the experimental
   framework, our Makefiles use GNU extensions to make, as well as features
   that were introduced in version 3.81.

 - A language modelling toolkit to train language models.  Our code can read
   and use language models, but we don't provide the training functionality,
   since it is readily available.  If your licensing requirements allow it, we
   recommend SRILM (http://www.speech.sri.com/projects/srilm/).  If you can't
   used SRILM, we recommend MITLM (http://code.google.com/p/mitlm/), another
   excellent LM toolkit which allows commercial use.  You can also use any
   other package which produces language models in Doug Paul's ARPA format, but
   note that in our experiments, SRILM and MITLM have worked best.

Optional dependencies for all distributions:

 - ICU - Portage 1.4 includes a few tools that use ICU to correctly do
   case-mapping on utf-8 data.  This functionality will be disabled if ICU is
   not available.  We recommend you install ICU if you can, but if you have
   difficulties with it, you can leave it out.  In this case, for source
   distributions, set the ICU variable in src/Makefile.user-conf to NONE.

   With binary only distributions, use programs and libraries in bin/<arch>-icu
   and lib/<arch>-icu if you have ICU, or programs in libraries in bin/<arch>
   and lib/<arch> if you don't.  The choice of which executables to use is best
   done by editing the user configurable variables in SETUP.bash and
   SETUP.tcsh.  Unfortunately, dynamic ICU libraries of different versions are
   not interchangeable, so you must have the same version we compiled with to
   use the ICU version.  If you run "ldd bin/<arch>/canoe", you should see a
   line in the output reading "libicuuc.so.NN => ...".  The number after .so
   tells you what version we compiled with, e.g., 40 means 4.0 (the minor
   version number does not matter, e.g., 3.4.1 is OK for 34).  The text after
   the arrow will either say "not found", in which case you have a problem, or
   it will give the path to this file, in which case things should work.  If
   you have installed the right version of ICU and this command still says "not
   found", add the path where the libicuuc.so.NN file is found to your
   LD_LIBRARY_PATH environment variable, e.g., by editing SETUP.bash and
   SETUP.tcsh as described below.

   With source code distributions, if you install ICU, edit the ICU variable in
   src/Makefile.user-conf to enable the compilation of the relevant code.

   With most Linux distros, you just need to install a package called something
   like libicu-dev, and you're done.  In this case the ICU variable is not
   required since the library will be installed in the standard locations.
   
   If it is not available via your Linux distro, ICU can be downloaded from
   http://icu-project.org/download/.
   This procedure worked for us:
      # Download the ICU4C 4.0 tar ball and expand it
      wget http://download.icu-project.org/files/icu4c/4.0/icu4c-4_0-src.tgz
      tar -xzf icu4c-4_0-src.tgz
      cd icu/source
      # Run the configuration program - replace $DEST with your preferred
      # destination, e.g., $PORTAGE, $HOME, $HOME/pkgs or $HOME/icu.
      ./runConfigureICU Linux --prefix=$DEST
      # Compile and install
      make install
      # Edit src/Makefile.user-conf and set the ICU variable to $DEST.
      # You may also need to edit SETUP.bash and SETUP.tcsh and add :$DEST/lib
      # at the end of the two expressions setting LD_LIBRARY_PATH.

 - libsvm - The executable programs that come with the libsvm library are
   needed for Confidence Estimation.  The package is available from
   http://www.csie.ntu.edu.tw/~cjlin/libsvm/ and is very easy to compile.
   Installation is manual but trivial.  This procedure worked for us:
      # Download the current tar ball
      wget 'http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz'
      # Expand it
      tar -xzf libsvm-2.91.tar.gz
      # Go in the directory and compile the package
      cd libsvm-2.91
      make
      # "Install" the three executables somewhere on the PATH.
      cp svm-predict svm-train svm-scale $PORTAGE/bin

   If you can work as root, libsvm is available through some Linux distros as a
   package called libsvm-tools or libsvm.  On CentOS, which uses yum, this
   should work:
      # Search for packages called libsvm
      yum search libsvm
      # Find the one matching your architecture, say x86_64:
      yum install libsvm.x86_64

 - XML::Twig version 3.28 or later - this Perl module is used by tmx2lfl.pl to
   extract text out of TMX files.  It has a number of further dependencies that
   need to be installed as well, and that should be handled automatically by
   the following methods.

   If you're using yum or another Linux package manager, the easiest method is
   to install perl-XML-Twig.  This has to be done as root.  It should cause
   perl-XML-Parser and probably several other packages to get isntalled too.

   Failing that, you can try using cpan.  Executed as root, this command might
   do the trick.
      cpan -i XML::Twig
   You have to let it install all dependencies.  (Say y or yes to all
   questions.)  You mileage may vary because various compilation steps are
   required.

   If you cannot work as root, you can setup libraries in your user account,
   but some work will be needed to configure CPAN to do so, and then some more
   work will be required so those libraries are seen by Perl at runtime.  Ask
   your sysadmin for help if you don't already know how to do this.

 - xml_grep and xmllint - also required by tmx2lfl.pl.  xml_grep comes with
   XML::Twig.  xmllint is fairly standard and should be available via the
   package manager in most distros.

 - Python - some convenience scripts use python.  Python should be standard, or
   avaiable via the package manager, in most distros.

Mandatory dependencies for source code distributions:

 - GNU g++ - Portage 1.4 compilation has only been tested with g++, and makes
   use of some g++ extensions to C++.  We currently use versions between 4.2.0
   and 4.5.0.  Portage 1.4.1 was compiled and tested with g++ 4.4.4 and 4.5.0,
   while Portage 1.4.2 supports g++ 4.5.1.  You need 4.2.0 or more recent to
   take advantage of multi-threading via OpenMP, used in some parts of Portage.

 - boost - Portage 1.4 makes use of some libraries in the boost C++ libraries
   collection, including the Boost Graph Library, uBLAS, smart pointers,
   iostreams, etc.
   
   We have compiled and tested Portage 1.4 with the following boost/g++
   combinations:
    - boost 1.43 + g++ 4.5
    - boost 1.43 + g++ 4.4
    - boost 1.36 + g++ 4.3
    - boost 1.36 + g++ 4.2
   Other combinations may or may not work.  For example, we know boost 1.36 is
   not compatible with g++ 4.4 or later.  If you already have another boost/g++
   combination and Portage 1.4 compiles without errors, your installation
   should be OK.  Otherwise, try one of the combinations listed above.

   Some recent distributions of Linux may already include the boost libraries,
   otherwise you can download them free from the boost home page.  However,
   some Linux distributions include only parts of boost -- some leave out the
   Boost Graph Library, for example.  If you get errors about missing boost
   includes while compiling Portage, do a complete installation.

   It is recommended you have your sys admin install boost, but you can also
   install it in your own user space.  Either way, you need to edit
   src/Makefile.user-conf and set BOOST_ROOT to the root directory of your
   boost installation.  The Portage 1.4 makefiles are configured to look for
   the boost include files in $BOOST_ROOT/include, and the boost libraries in
   $BOOST_ROOT/lib.

   Boost home page: http://www.boost.org or http://boost.sourceforge.net
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download the boost tarball, say boost_1_NN_0.tar.bz2, by following the
      # download links from the home page.
      # Extract it
      tar -xjf boost_1_NN_0.tar.bz2
      # Go into it
      cd boost_1_NN_0/
      # Do auto-config, overriding the install destination - replace $DEST with
      # your preferred destination, e.g., $PORTAGE, $HOME, $HOME/pkgs or
      # $HOME/boost, making sure that $BOOST_ROOT points to $DEST, either as en
      # environment variable or in src/build/Makefile.incl.  (the boostrap/bjam
      # commands are for recent versions of boost, while the configure/make
      # commands are for older versions.)
      ./bootstrap.sh --prefix=$DEST     OR     ./configure --prefix=$DEST
      # Build.  This step will take a long time.
      bjam -j4                          OR     make -k -j 4
      # Install to $DEST/{include,lib}
      bjam -j4 install                  OR     make -k -j 4 install
      # Edit src/Makefile.user-conf and set the BOOST_ROOT variable to $DEST.

 - zlib - Portage 1.4 uses zlib as an alternative to gzip in some unusual cases
   where the latter causes some Portage 1.4 programs to crash.  This library
   has been standard on Linux distributions for a long time, so you should not
   have to install it yourself.  In some distros, you have to add the
   zlib1g-dev package.  But if the compiler says it can't find libz.a, you can
   download it from http://www.zlib.net/.

Optional dependencies for source code distributions:

 - CxxTest - our unit testing framework depends on CxxTest, which can be
   downloaded from http://cxxtest.tigris.org/.  CxxTest is a very small package
   that is very easy to install, even though it needs to be installed manually.

   This procedure worked for us:
      # Download and expand the package
      wget http://cxxtest.tigris.org/files/documents/6421/43281/cxxtest-3.10.1.tar.gz 
      tar -xzf cxxtest-3.10.1.tar.gz
      cd cxxtest
      # Manual installation - replace $DEST with your preferred destination, e.g.
      # $PORTAGE, $HOME, $HOME/pkgs or $HOME/cxxtest.
      # Create $DEST/include if it doesn't already exist; install includes.
      mkdir -p $DEST/include
      cp -pr cxxtest $DEST/include/
      # Create $DEST/bin if it doesn't already exist; install cxxtestgen.pl.
      mkdir -p $DEST/bin
      cp -p cxxtestgen.pl $DEST/bin/
      # Edit src/Makefile.user-conf and set the CXXTEST variable to $DEST.

   If you don't install CxxTest, set CXXTEST=NONE in src/Makefile.user-conf.

 - log4cxx - some programs in Portage 1.4 use log4cxx to produce debugging
   information.  By default, the use of logging is disabled in Portage 1.4.
   To enable logging, make sure you have log4cxx installed, edit
   src/Makefile.user-conf to set LOG4CXX to the full path with log4cxx is
   installed, and compile again.  The logging facilities are not well
   documented, so you would probably only do this in communication with ILT
   staff, who will explain how to use it as necessary.

   log4cxx home: http://logging.apache.org/log4cxx/.
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download log4cxx-0.9.7.tar.gz by following the download links from the
      # log4cxx home page.
      # Expand the package
      tar -xzf log4cxx-0.9.7.tar.gz
      cd log4cxx-0.9.7
      # Run autoconf - see notes about $DEST/log4cxx in the boost section above.
      ./autogen.sh
      ./configure -with-XML=no --prefix=$DEST/log4cxx
      # Compile (add -j 5 to speed up this step)
      make
      # Install to $DEST/log4cxx/{include,lib}
      make install
      # Edit src/Makefile.user-conf and set the LOG4CXX variable to $DEST.

 - etags and/or ctags - recommended if you program with emacs or vi or related
   programs.  These programs will build the databases needed to enable
   cross-links in these editors.  See your editor's manual for details.

   Portage 1.4 uses both ctags and etags by default, but you can disable their
   use by defining PORTAGE_NO_CTAGS and/or PORTAGE_NO_ETAGS to 1 in your
   .<shell>rc file, or by uncommenting the lines "PORTAGE_NO_CTAGS=1" and/or
   "PORTAGE_NO_ETAGS=1" in src/Makefile.user-conf.

Optional PortageLive dependencies

 - If you are interested in PortageLive, look at PortageLive/va/PLiveVA.pdf for
   additional dependencies. 
