                               PortageII_cur

Traitement multilingue de textes / Multilingual Text Processing
Technologies de l'information et des communications /
   Information and Communications Technologies
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2014, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2014, Her Majesty in Right of Canada

Distributed under specific licensing terms.  Please refer to your signed
license agreement for details.

See NOTICE for the Copyright notices of 3rd party libraries.


                          Installing PortageII_cur

We don't use autoconf, so the installation is done manually, but we tried to
keep it as simple as possible.

Copy the full contents of the CD to a directory of your choice, say
$HOME/PortageII-cur
   cp -prd /CDlocation $HOME/PortageII-cur
or
   rsync -av /CDlocation $HOME/PortageII-cur

Some users have reported needing to run "chmod +w" on some files or directories
after the cp or rsync above.  Running "chmod -R +w $HOME/PortageII-cur" might
solve this problem.

If you chose a location other than $HOME/PortageII-cur, edit SETUP.bash and
SETUP.tcsh and change the value of the PORTAGE variable to the actual location
where your installed PortageII, and adjust the next steps below accordingly.

Add $HOME/PortageII-cur/{bin,lib,include} to the appropriate environment
variables by sourcing $HOME/PortageII-cur/SETUP.bash or SETUP.tcsh (depending
on your preferred shell - if you use a shell other than bash or csh/tcsh,
you're on your own):
   source $HOME/PortageII-cur/SETUP.bash
or
   source $HOME/PortageII-cur/SETUP.tcsh

For source code distributions :

   Resolve any dependencies (see External dependencies, below).
   Review src/Makefile.user-conf and make any changes needed to reflect your
   system configuration and choices.
   Compile and install PortageII:
      cd src
      make -j 5
      make -j 5 install
   We typically use -j N for parallel compiling.  N = 1 + the number of CPUs on
   the machine seems to be optimal.  If you're sharing the machine with many
   users, however, you may not want to use the -j switch at all.


                        Verifying your installation

Once PortageII is installed, execute the following command to make sure you can
run the software:
   make -C $HOME/PortageII-cur/test-suite/unit-testing/check-installation
This script invokes programs that are each installed differently, and exercise
the key parts of PortageII installation.  If everything is OK, you should see
the following message: "Everything is correctly installed!" otherwise you will
get some indication of what could be missing or mis-configured.  Repeat the
command until you solved all errors.

If you get "command not found" for any of these, your PATH is not correctly set
or your installation failed.  Check your SETUP.bash/tcsh file and make sure you
are sourcing it properly, ideally in your .<shell>rc file.  Your $PATH variable
should include PortageII-cur/bin.  Also check that PortageII-cur/bin contains
tokenize.pl.  If that's not the case, "make install" probably didn't complete
successfully.

If tokenize.pl -h or ce.pl -h says "Can't locate <SomeFile>.pm in @INC ...",
then your PERL5LIB is not correctly set or your installation partially failed.
Check your SETUP.bash/tcsh file and make sure you are sourcing it properly,
ideally in your .<shell>rc file.  Your $PERL5LIB variable should include
PortageII-cur/lib.  That directory should also contain LexiTools.pm and a
subdirectory called CE containing several .pm files.  If it doesn't, "make
install" probably didn't complete successfully.

If tmx2lfl.pl complains about not finding XML/Twig.pm, then XML::Twig is
missing or is not installed correctly; see External dependencies below.  You
can safely ignore this problem if you're not planning to work with TMX or TTX
files.

If canoe -h says "command not found" but the other two commands work:
 - with binary distributions, your $PATH variable must also include the
   architecture specific folder PortageII-cur/bin/<arch>.  Check your
   SETUP.bash/tcsh file and make sure you have set the PRECOMP_PORTAGE_ARCH
   appropriately.  The PortageII-cur/bin/<arch> directory contains all the
   compiled C++ executables.
 - with source distributions, canoe is installed in the same directory as
   cow.sh and tokenize.pl, so compilation probably failed if only canoe doesn't
   work.

Binary distributions only:
 - If canoe -h complains about a lib*.so* file not being found, some external
   dependency might be missing or you have the wrong version of a dynamic
   library.  An error about libstdc++.so, GLIBCXX or libgomp.so probably means
   your version of g++ is older than the one we used to compile PortageII.  You
   might need a newer version: you won't use the compiler, but you still need
   its dynamic libraries.  See the ICU section below if your get an error about
   libicu*.so.
 - If canoe -h says "cannot execute binary file", then we might not have built
   an executable compatible with your computing hardware.  Contact us.


                              Getting Started

Now you're ready to run the PortageII suite of programs.

We also provide a template experimental framework in subdirectory framework.
This is intended as a reasonable out-of-the-box baseline system.  We recommend
you use this framework as your starting point for real experiments.

In framework, you will also find the document framework-toy.pdf.  This document
walks you through a complete experiment using a toy corpus.  It is intended as
a tutorial to get you started with PortageII.

For further documentation, see doc/user-manual.html.


                           Hardware requirements

See doc/system-requirements.pdf, "Performance Information and Required
Configuration", for a discussion of hardware requirements and system
performance on some sample datasets.


                           External dependencies

Before installing PortageII itself, you need to make sure you have the
following dependencies installed.

Note that in the following, we show instructions for installing all external
packages to $PORTAGE/pkgs/<package_name>.  This is just a suggestion, you can
choose any destination you want, as long as you set the required configuration
variables accordingly afterwards.  You also can simplify your configuration by
always using the same destination, say $PORTAGE/pkgs, or even just $PORTAGE,
but then it will be harder to distinguish files installed by different
packages.

Mandatory dependencies for all distributions:

 - Linux - we have tested PortageII on various Linux distributions and it runs
   without problems, as long as the rest of the dependencies are installed.  We
   tested older versions on PC-BSD and Mac OS X.  It worked reasonably well on
   those platforms then, but these are not our regular working platforms and we
   make no guarantees everything will work correctly.  Things also work
   reasonably well on Cygwin, but again we make no guarantees.  We have not
   tested on Solaris at all.

 - A large swap file.  Your system should be configured to have twice as much
   swap space as RAM.  Yes, this is contrary to what most system administrators
   recommend today - typically a one-to-one ratio - but using a two-to-one
   ratio will avoid frustrating problems down the road.  Insufficient swap
   space will sometimes cause crashes due to a "lack of memory" even though
   there appears to be plenty available.

 - Standard utilities: awk, bash (3.0 or more recent), bzip2, (e)grep, gzip,
   head, sed, sort, tail, tar, etc.

 - Perl 5.10 or more recent. Older versions do not handle UTF-8 data correctly.
   If you install Perl in a non-standard location, make sure it comes first on
   your PATH, or add its bin directory to EXTRA_PROGRAM_PATH in
   SETUP.bash/tcsh.

 - GNU make 3.81 or more recent - when compiling PortageII and when running the
   experimental framework, our Makefiles use GNU extensions to make, as well as
   features that were introduced in version 3.81.

 - Python 2.7 - our new tuning script, tune.py, the new truecasing module, as
   well as some some convenience scripts, use python.  In most distros, Python
   should be standard, or available via the package manager, but it might not
   be the right version: version 2.7 (any 2.7.x) is required.  If you install
   Python 2.7 in a non-standard location, make sure it comes first on your
   PATH, or add its bin directory to EXTRA_PROGRAM_PATH in SETUP.bash/tcsh.
   Alternatively, make a soft link (using ln -s) in $PORTAGE/bin to the python
   executable.  (The soft link is the best solution for your PortageLive
   server(s), where you must also make sure the apache user has sufficient
   permissions to use python 2.7.)  If you compile Python 2.7 by hand, make
   sure you have the zlib-devel (or zlib-dev, or zlib1g-dev) package installed
   first, or download zlib from http://www.zlib.net and install it by hand.

   This procedure worked for us:
      # Obtain Python-2.7.1.tar.bz2 from the web.
      tar -xjf Python-2.7.1.tar.bz2
      cd Python-2.7.1
      ./configure --prefix=$PORTAGE/pkgs/python2.7.1
      make -j 5
      make install -j 5
      # Add $PORTAGE/pkgs/python2.7.1/bin to EXTRA_DYNLIB_PATH in SETUP.bash/tcsh,
      # or: ln -s $PORTAGE/pkgs/python2.7.1/bin/python $PORTAGE/bin/python

 - A language modelling toolkit to train language models.  Our code can read
   and use language models, but we don't provide the training functionality,
   since it is readily available.  If your licensing requirements allow it, we
   recommend SRILM (http://www.speech.sri.com/projects/srilm/).  If you can't
   use SRILM, we recommend MITLM (http://code.google.com/p/mitlm/), another
   excellent LM toolkit which allows commercial use.  You can also use any
   other package which produces language models in Doug Paul's ARPA format, but
   note that in our experiments, SRILM and MITLM have worked best.

 - Java - A JRE (Java Runtime Environment) version 1.6 or more recent is
   required to perform decoder weight tuning.  The command "java" must be on
   your PATH.  Running "java -version" should produce something like 1.6.0_nn
   or 1.7.0_nn if your installation is correct.  (Again, you can add java's bin
   directory to EXTRA_PROGRAM_PATH in SETUP.bash/tcsh if you install it in a
   non-standard location.)

Optional dependencies for all distributions:

 - MGIZA++ - PortageII supports combining IBM4 alignments with its own HMM and
   IBM2 alignments for improved phrase table extraction.  IBM4 alignments must
   be generated by an external word-alignment toolkit.  Although any toolkit in
   the giza family should work, we have only tested MGIZA++, a multi-threaded
   implementation of Giza++.  You can obtain it here:
   http://sourceforge.net/projects/mgizapp/.

   As we write this, MGIZA++ versions 0.6.3 and 0.7.2 are available and
   equivalent for our purposes.  For installation under Linux, however, version
   0.6.3 can be easier.  We're not aware of any advantages version 0.7.2 might
   have over 0.6.3 on Linux machines.
   
   Installation of MGIZA++ 0.6.3 is straightforward.  This worked for us:
      # Obtain mgizapp-0.6.3.tar.gz
      tar -xzf mgizapp-0.6.3.tar.gz
      cd mgizapp
      ./configure --prefix=$PORTAGE/pkgs/mgizapp-0.6.3
      make -j 5
      make -j 5 install
      # Add $PORTAGE/pkgs/mgizapp-0.6.3/bin *and*
      # $PORTAGE/pkgs/mgizapp-0.6.3/scripts to EXTRA_PROGRAM_PATH in
      # SETUP.bash/tcsh.

   Installation of MGIZA++ 0.7.2 can be a bit trickier:
      # Obtain mgizapp-0.7.2.tar.gz
      tar -xzf mgizapp-0.7.2.tar.gz
      cd mgizapp
      ./configure --prefix=$PORTAGE/pkgs/mgizapp-0.7.2
      # MGIZA++ 0.7 requires a fairly recent version of boost.  If you get
      # errors when you compile with "make -j 5; make -j 5 install", first try
      # updating boost using your machine's package manager.  If compilation
      # still fails, then manually install a recent version of boost (see boost
      # section below for help), set BOOST_ROOT to point to where you installed
      # it, and try this:
      LD_RUN_PATH=$BOOST_ROOT/lib:$LD_RUN_PATH \
         make -j 5 CPPFLAGS="-isystem $BOOST_ROOT/include" \
         LDFLAGS="-L$BOOST_ROOT/lib -lboost_thread"
      LD_RUN_PATH=$BOOST_ROOT/lib:$LD_RUN_PATH \
         make -j 5 CPPFLAGS="-isystem $BOOST_ROOT/include" \
         LDFLAGS="-L$BOOST_ROOT/lib -lboost_thread" \
         install
      # Add $PORTAGE/pkgs/mgizapp-0.7.2/bin *and*
      # $PORTAGE/pkgs/mgizapp-0.7.2/scripts to EXTRA_PROGRAM_PATH in
      # SETUP.bash/tcsh.

 - ICU - PortageII includes a few tools that use ICU to correctly do
   case-mapping on utf-8 data.  This functionality will be disabled if ICU is
   not available.  We recommend you install ICU if you can, but if you have
   difficulties with it, you can leave it out.  In this case, for source
   distributions, set the ICU variable in src/Makefile.user-conf to NONE.

   With binary only distributions, use programs and libraries in bin/<arch>-icu
   and lib/<arch>-icu if you have ICU, or programs in libraries in bin/<arch>
   and lib/<arch> if you don't.  The choice of which executables to use is best
   done by editing the user configurable variables in SETUP.bash and
   SETUP.tcsh.  Unfortunately, dynamic ICU libraries of different versions are
   not interchangeable, so you must have the same version we compiled with to
   use the ICU version.  If you run "ldd bin/<arch>/canoe", you should see a
   line in the output reading "libicuuc.so.NN => ...".  The number after .so
   tells you what version we compiled with, e.g., 40 means 4.0 (the minor
   version number does not matter, e.g., 3.4.1 is OK for 34).  The text after
   the arrow will either say "not found", in which case you have a problem, or
   it will give the path to this file, in which case things should work.  If
   you have installed the right version of ICU and this command still says "not
   found", add the path where the libicuuc.so.NN file is found to your
   LD_LIBRARY_PATH environment variable, e.g., by editing SETUP.bash and
   SETUP.tcsh as described below.

   With source code distributions, if you install ICU, edit the ICU variable in
   src/Makefile.user-conf to enable the compilation of the relevant code.

   With most Linux distros, you just need to install a package called something
   like libicu-dev, and you're done.  In this case the ICU variable is not
   required since the library will be installed in the standard locations.
   
   If it is not available via your Linux distro, ICU can be downloaded from
   http://icu-project.org/download/.  Any version will do; we've tested 49, 4.0
   and 3.4.
   This worked for us:
      # Download the ICU4C 49 tar ball and expand it
      wget 'http://download.icu-project.org/files/icu4c/49.1.2/icu4c-49_1_2-src.tgz'
      tar -xzf icu4c-49_1_2-src.tgz
      mv icu icu-49.1.2
      cd icu-49.1.2
      # Run the configuration program
      ./runConfigureICU Linux --prefix=$PORTAGE/pkgs/icu
      # Compile and install
      make -j 4 install
      # Edit src/Makefile.user-conf and set the ICU variable to $PORTAGE/pkgs/icu.
      # Edit SETUP.bash and SETUP.tcsh and add :$PORTAGE/pkgs/icu/lib at
      # the end of EXTRA_DYNLIB_PATH.

 - libsvm - The executable programs that come with the libsvm library are
   needed for Confidence Estimation.  The package is available from
   http://www.csie.ntu.edu.tw/~cjlin/libsvm/ and is very easy to compile.
   Installation is manual but trivial.  Any version should do, as far as we
   know.  This procedure worked for us:
      # Download the current tar ball
      wget 'http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz'
      # Expand it
      tar -xzf libsvm-3.12.tar.gz
      # Go in the directory and compile the package
      cd libsvm-3.12
      make
      # "Install" the three executables somewhere on the PATH.
      cp svm-predict svm-train svm-scale $PORTAGE/bin

   If you can work as root, libsvm is available in some Linux distros as a
   package called libsvm-tools or libsvm.  On CentOS, which uses yum, this
   should work:
      # Search for packages called libsvm
      yum search libsvm
      # Find the one matching your architecture, say x86_64:
      yum install libsvm.x86_64

 - XML::Twig version 3.32 or later - this Perl module is used by tmx2lfl.pl to
   extract text out of TMX files.  It has a number of further dependencies that
   need to be installed as well, and that should be handled automatically by
   the following methods.

   If you're using yum or another Linux package manager, the easiest method is
   to install perl-XML-Twig.  This has to be done as root.  It should cause
   perl-XML-Parser and probably several other packages to get isntalled too.

   Failing that, you can try using cpan.  Executed as root, this command might
   do the trick.
      cpan -i XML::Twig
   You have to let it install all dependencies.  (Say y or yes to all
   questions.)  You mileage may vary because various compilation steps are
   required.

   If you cannot work as root, you can setup libraries in your user account,
   but some work will be needed to configure CPAN to do so, and then some more
   work will be required so those libraries are seen by Perl at runtime.  Ask
   your sysadmin for help if you don't already know how to do this.

 - xml_grep and xmllint - also required by tmx2lfl.pl.  xml_grep comes with
   XML::Twig.  xmllint is fairly standard and should be available via the
   package manager in most distros.

 - If you are planning to process Chinese text, you need a Chinese segmenter.
   You can obtain and use ICTCLAS, available in various locations on the web,
   such as https://github.com/pierrchen/ictclas_plus, or NRC's rewrite of the
   LDC/UPENN segmenter, included under third-party/chinese-segmentation/ on
   this CD for convenience.  The latter is easier to install, but ICTCLAS is
   known to produce better results, so we recommend it.

   The NRC rewrite of the LDC/UPENN segmenter can be installed like this:
      # We assume $PORTAGE points to the top level directory of the CD
      cp $PORTAGE/third-party/chinese-segmentation/chinese_segmenter.pl $PORTAGE/bin/
      cp $PORTAGE/third-party/chinese-segmentation/manseg.fre $PORTAGE/lib/

   The ICTCLAS downloaded from the link provided above can be installed like
   this:
      # On the github site, click on "Downloads" and then "Download as tar.gz"
      # Expand the .tar.gz file and cd into the directory created
      cd Source
      g++ -c *.cpp
      ar -r ictclas.a *.o
      cd ..
      g++ -o ictclas main.cpp Source/ictclas.a
      # Choose a destination $DEST on your PATH, possibly $PORTAGE/bin
      cp -pr ictclas Data $DEST

   If you use ICTCLAS, you must also edit tokenize_plugin (in bin/ for binary
   distributions, in src/textutils/ for source distributions) to make your
   choice effective (search for ICTCLAS in that file and follow the
   instructions there).  You must also tell the framework to use ICTCLAS and
   by setting the USE_ICTCLAS variable to 1 in framework/Makefile.params
   (again, search for ICTCLAS in that file).

Mandatory dependencies for source code distributions:

 - GNU g++ - PortageII compilation has only been tested with g++, and makes use
   of some g++ extensions to C++.  We currently use versions between 4.2.0 and
   4.6.2.  You need 4.2.0 or more recent to take advantage of multi-threading
   via OpenMP, used in some parts of Portage.

 - boost - PortageII makes use of some libraries in the boost C++ libraries
   collection, including the Boost Graph Library, uBLAS, smart pointers,
   iostreams, etc.

   Version 1.44 or more recent is required, because of a bug in earlier
   releases of boost when handling compressed files.

   Some recent distributions of Linux may already include the boost libraries,
   otherwise you can download them from the boost home page.  However, some
   Linux distributions include only parts of boost -- some leave out the Boost
   Graph Library, for example.  If you get errors about missing boost includes
   while compiling Portage, do a complete installation.  Some distros also
   provide a version of boost that is too old.  Make sure you check that you
   are using 1.44 or more recent.

   It is recommended you have your sys admin install boost, but you can also
   install it in your own user space.  Either way, you need to edit
   src/Makefile.user-conf and set BOOST_ROOT to the root directory of your
   boost installation.  The PortageII makefiles are configured to look for the
   boost include files in $BOOST_ROOT/include, and the boost libraries in
   $BOOST_ROOT/lib.

   Boost home page: http://www.boost.org or http://boost.sourceforge.net
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download the boost tarball, say boost_1_NN_0.tar.bz2, by following the
      # download links from the home page.
      # Extract it
      tar -xjf boost_1_NN_0.tar.bz2
      # Go into it
      cd boost_1_NN_0/
      # Do auto-config, overriding the install destination - replace $DEST with
      # your preferred destination, e.g., $PORTAGE, $HOME, $HOME/pkgs/boost_1_NN_0 or
      # $HOME/boost_1_NN_0, making sure that $BOOST_ROOT points to $DEST, either as en
      # environment variable or in src/build/Makefile.incl.
      ./bootstrap.sh --prefix=$DEST
      # Build.  This step will take a long time.
      bjam -j4
      # Install to $DEST/{include,lib}
      bjam -j4 install
      # Edit src/Makefile.user-conf and set the BOOST_ROOT variable to $DEST.

Optional dependencies for source code distributions:

 - TCMalloc - PortageII will run much faster if you use this very efficient
   memory allocation library from Google.  You can obtain it here:
   http://code.google.com/p/gperftools/.  After you download and install it,
   set the variable TCMALLOC in src/Makefile.user-conf to enable its use.
   TCMalloc depends on libunwind, so you might have to install that first.  It
   is available at http://www.nongnu.org/libunwind/.

   This procedure worked for us:
      # Change the definition of PKG_DIR if you want to install somewhere else.
      # Doing the export before you start, as shows here, will let you cut and
      # paste the instructions below into your shell.
      export PKG_DIR=$PORTAGE/pkgs

      # Get and install the latest libunwind, 1.0.1 at the time of writing:
      wget 'http://download.savannah.gnu.org/releases/libunwind/libunwind-1.0.1.tar.gz'
      tar -xzf libunwind-1.0.1.tar.gz
      cd libunwind-1.0.1/
      ./configure --prefix=$PKG_DIR/libunwind-1.0.1
      make -j 4
      # make check showed errors for us, but they don't seem to affect
      # TCMalloc, so we've been ignoring them.
      make check -j 4
      make install -j 4
      cd ..

      # Get the latest gperftools (which includes TCMalloc), 2.0 at the time of
      # writing:
      # Obtain gperftools-2.0.tar.gz from http://code.google.com/p/gperftools/
      tar -xzf gperftools-2.0.tar.gz
      cd gperftools-2.0
      # Yes, the follow is ugly, but doing it this way will make your life easier later
      LD_RUN_PATH=$PKG_DIR/libunwind-1.0.1/lib:$LD_RUN_PATH C_INCLUDE_PATH=$PKG_DIR/libunwind-1.0.1/include LDFLAGS=-L$PKG_DIR/libunwind-1.0.1/lib ./configure --prefix=$PKG_DIR/gperftools-2.0
      LD_RUN_PATH=$PKG_DIR/libunwind-1.0.1/lib:$LD_RUN_PATH LDFLAGS=-L$PKG_DIR/libunwind-1.0.1/lib make CXXFLAGS="-g -I$PKG_DIR/libunwind-1.0.1/include" -j 5
      LD_RUN_PATH=$PKG_DIR/libunwind-1.0.1/lib:$LD_RUN_PATH LDFLAGS=-L$PKG_DIR/libunwind-1.0.1/lib make CXXFLAGS="-g -I$PKG_DIR/libunwind-1.0.1/include" -j 5 check
      LD_RUN_PATH=$PKG_DIR/libunwind-1.0.1/lib:$LD_RUN_PATH LDFLAGS=-L$PKG_DIR/libunwind-1.0.1/lib make CXXFLAGS="-g -I$PKG_DIR/libunwind-1.0.1/include" -j 5 install

      # Edit src/Makefile.user-conf and set TCMALLOC=$PKG_DIR/gperftools-2.0
      # (here you need to replace $PKG_DIR by its value, e.g., $PORTAGE/pkgs).

 - CxxTest - our unit testing framework depends on CxxTest, which can be
   downloaded from http://cxxtest.tigris.org/.  CxxTest is a very small package
   that is very easy to install, even though it needs to be installed manually.

   This procedure worked for us:
      # Obtain cxxtest-4.0.3.tar.gz (or the current version) from http://cxxtest.com/
      # Installation is done by simply expanding the tar ball in the
      # destination directory
      cd $PORTAGE/pkgs
      tar -xzf /PATH/TO/cxxtest-4.0.3.tar.gz
      # Edit src/Makefile.user-conf and set the CXXTEST variable to $PORTAGE/pkgs/cxxtest

   If you don't install CxxTest, set CXXTEST=NONE in src/Makefile.user-conf.

 - log4cxx - some programs in PortageII use log4cxx to produce debugging
   information.  By default, the use of logging is disabled in PortageII.
   To enable logging, make sure you have log4cxx installed, edit
   src/Makefile.user-conf to set LOG4CXX to the full path with log4cxx is
   installed, and compile again.  The logging facilities are not well
   documented, so you would probably only do this in communication with ILT
   staff, who will explain how to use it as necessary.

   log4cxx home: http://logging.apache.org/log4cxx/.
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download log4cxx-0.9.7.tar.gz by following the download links from the
      # log4cxx home page.
      # Expand the package
      tar -xzf log4cxx-0.9.7.tar.gz
      cd log4cxx-0.9.7
      # Run autoconf - see notes about $DEST/log4cxx in the boost section above.
      ./autogen.sh
      ./configure -with-XML=no --prefix=$DEST/log4cxx
      # Compile (add -j 5 to speed up this step)
      make
      # Install to $DEST/log4cxx/{include,lib}
      make install
      # Edit src/Makefile.user-conf and set the LOG4CXX variable to $DEST.

 - etags and/or ctags - recommended if you program with emacs or vi or related
   programs.  These programs will build the databases needed to enable
   cross-links in these editors.  See your editor's manual for details.

   PortageII uses both ctags and etags by default, but you can disable their
   use by defining PORTAGE_NO_CTAGS and/or PORTAGE_NO_ETAGS to 1 in your
   .<shell>rc file, or by uncommenting the lines "PORTAGE_NO_CTAGS=1" and/or
   "PORTAGE_NO_ETAGS=1" in src/Makefile.user-conf.

Optional PortageLive dependencies

 - If you are interested in PortageLive, look at PortageLive/va/PLiveVA.pdf for
   additional dependencies.


MADA and dependencies

  If you have obtained all licenses to all of MADA's dependencies, here is how
  you can install MADA on a system that servers portagelive.

  # g++ version 4
  check if you have g++ installed and what version
  gcc --version
  g++ --version
  or install it
  yum install gcc.x86_64 gcc-c++.x86_64 # on a centos linux

  # perl's Build system for SAMA
  yes | cpan install Module::Build

  # SVMTool-1.3.1
  cd ~/tmp
  wget 'http://www.lsi.upc.edu/~nlp/SVMTool/SVMTool.v1.3.1.tar.gz'
  #rsync -arz larkins@balzac:/home/portage/downloads/SVMTool.v1.3.1.tar.gz .
  tar zxvf SVMTool.v1.3.1.tar.gz
  cd SVMTool-1.3.1/
  perl Makefile.PL
  make
  cp -R lib/SVMTool /opt/PortageII/lib
  cp bin/* /opt/PortageII/bin

  # Buckwalter
  cpan install Encode::Buckwalter

  # SAMA
  cd ~/tmp
  obtain LDC2010L01.tgz
  #rsync -arz larkins@balzac:/portage/corpora/GALE_prepd/2012/releases/ar_en/tools/SAMA-v3.1/LDC2010L01.tgz ~/tmp
  tar zxvf LDC2010L01.tgz
  cd sama_3_1/SAMA-3.1/
  perl Build.PL
  ./Build
  ./Build install

  # SRILM
  cd ~/tmp
  obtain srilm-1.6.0.tgz
  #rsync -arz larkins@balzac:/home/portage/downloads/srilm-1.6.0.tgz ~/tmp
  mkdir srilm-1.6.0
  cd srilm-1.6.0
  tar zxvf ../srilm-1.6.0.tgz
  pwd
  edit Makefile to set SRILM to the current dir
  sed -i -e "s|^# SRILM.*|SRILM = $PWD|" Makefile
  make MACHINE_TYPE=i686-m64
  [[ -e "bin/i686-m64/disambig" ]] || echo "disambig not built" >&2
  cp bin/i686-m64/disambig /opt/PortageII/bin

  # MADA
  cd ~/tmp
  obtain mada from http://www1.ccls.columbia.edu/MADA/MADA_download.html
  #rsync -arz larkins@balzac:/portage/corpora/GALE_prepd/2012/releases/ar_en/tools/MadaTokan32/MADA-3.2.tgz .
  tar zxvf MADA-3.2.tgz
  cd MADA-3.2
  mv * /opt/PortageII/bin
  cd /opt/PortageII/bin
  PERL5LIB=/opt/PortageII/bin:/opt/PortageII/lib:$PERL5LIB \
  perl INSTALL.pl \
     madahome=/opt/PortageII/bin \
     srihome=/opt/PortageII \
     svmhome=/opt/PortageII \
     xamadir=/root/tmp/sama_3_1/SAMA-3.1/blib/lib/SAMA_DB/v3_1 \
     xamaversion=SAMA3.1 \
     &> log.MADA
  cd /opt/PortageII/lib
  ln -s ../bin/MADA .

  Test MADA
  echo "اقلقتهم مشاهد النيران وهي تلتهم علمهم الاحمر والابيض لتحوله الى رماد" > test_ar
  PERL5LIB=/opt/PortageII/lib:$PERL5LIB perl /opt/PortageII/bin/MADA+TOKAN.pl file=test_ar config=/opt/PortageII/bin/config-files/template.madaconfig
  ls -1 test_ar*
  test_ar
  test_ar.bw
  test_ar.bw.mada
  test_ar.bw.mada.tok
  head test_ar
  اقلقتهم مشاهد النيران وهي تلتهم علمهم الاحمر والابيض لتحوله الى رماد
  head test_ar.bw
  Aqlqthm m$Ahd AlnyrAn why tlthm Elmhm AlAHmr wAlAbyD ltHwlh AlY rmAd
  head test_ar.bw.mada.tok
  Aqlqt +hm m$Ahd AlnyrAn w+ hy tlthm Elm +hm AlAHmr w+ AlAbyD l+ tHwl +h Aly rmAd

  


                              Acknowledgments

We would like to acknowledge the help of Marc Tessier, as well as the feedback
from several other users, in improving these installation notes.

