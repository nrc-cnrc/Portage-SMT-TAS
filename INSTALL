                               PortageII_cur

Traitement multilingue de textes / Multilingual Text Processing
Centre de recherche en technologies num√©riques / Digital Technologies Research Centre
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2018, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2018, Her Majesty in Right of Canada

Distributed under specific licensing terms.  Please refer to your signed
license agreement for details.

See NOTICE for the Copyright notices of 3rd party libraries.


                          Installing PortageII_cur

We don't use autoconf, so the installation is done manually. We tried to
keep it simple, but that's not always easy...

This section describes installing PortageII itself. Please scroll down to the
External dependencies section below for instructions on installing those.

Copy the full contents of the CD to a directory of your choice, say
$HOME/PortageII-cur
   cp -prd /CDlocation $HOME/PortageII-cur
or
   rsync -av /CDlocation $HOME/PortageII-cur

Some users have reported needing to run "chmod +w" on some files or directories
after the cp or rsync above.  Running "chmod -R +w $HOME/PortageII-cur" might
solve this problem.

If you chose a location other than $HOME/PortageII-cur, edit SETUP.bash and
SETUP.tcsh and change the value of the PORTAGE variable to the actual location
where your installed PortageII, and adjust the next steps below accordingly.

Add $HOME/PortageII-cur/{bin,lib} to the appropriate environment variables by
sourcing $HOME/PortageII-cur/SETUP.bash or SETUP.tcsh (depending on your
preferred shell - if you use a shell other than bash or csh/tcsh, you're on
your own):
   source $HOME/PortageII-cur/SETUP.bash
or
   source $HOME/PortageII-cur/SETUP.tcsh

For source code distributions :

   Verify that you have the compilation dependencies resolved to compile
   PortageII (see Mandatory dependencies for source code distributions):
      make \
         -C $HOME/PortageII-cur/test-suite/unit-testing/check-installation \
         pre_installation
   Resolve any dependencies (see External dependencies, below).
   Review src/Makefile.user-conf and make any changes needed to reflect your
   system configuration and choices.
   Compile and install PortageII:
      cd src
      make -j 5
      make -j 5 install
   We typically use -j N for parallel compiling.  N = 1 + the number of CPUs on
   the machine seems to be optimal.  If you're sharing the machine with many
   users, however, you may not want to use the -j switch at all.


                        Verifying your installation

PortageII depends on a number of third-party packages. The check-installation
test suite identifies unresolved dependencies. See the External dependencies
section below for the list of dependencies and how to resolve them.

Once PortageII is installed, execute the following command to make sure you can
run the software:
   make -C $HOME/PortageII-cur/test-suite/unit-testing/check-installation
This script invokes programs that are each installed differently, and exercise
the key parts of PortageII installation.  If everything is OK, you should see
the following message: "Installation successful." otherwise you will get some
indication of what could be missing or misconfigured.  Repeat the command
until you solved all errors.

If you encounter an error that we identify below as one you can safely ignore
for your training situation, then you can for check-installation to keep-going
even in the precence of errors by running:
   make -k -C $HOME/PortageII-cur/test-suite/unit-testing/check-installation
In that case, your will have to examine all the output to identify the errors
that you should address.

If you get "command not found" for any of the tests, your PATH is not correctly
set or your installation failed.  Check your SETUP.bash/tcsh file and make sure
you source it properly, ideally in your .<shell>rc file.  Your $PATH variable
should include PortageII-cur/bin.  Also check that PortageII-cur/bin contains
utokenize.pl.  If that's not the case for a source code distribution, "make
install" probably didn't complete successfully.

If utokenize.pl -h or ce.pl -h says "Can't locate <SomeFile>.pm in @INC ...",
then your PERL5LIB is not correctly set or your installation partially failed.
Check your SETUP.bash/tcsh file and make sure you are sourcing it properly,
ideally in your .<shell>rc file.  Your $PERL5LIB variable should include
PortageII-cur/lib.  That directory should also contain ULexiTools.pm and a
subdirectory called CE containing several .pm files.  If it doesn't, for a
source code distribution, "make install" probably didn't complete successfully.

If tmx2lfl.pl -h complains about not finding XML/Twig.pm, then XML::Twig is
missing or is not installed correctly; see External dependencies below.  You
can safely ignore this problem if you're not planning to work with TMX or TTX
files.

If filter-nc1.py -h and casemark.py -h complain about "ImportError: No module
named portage_utils", then your PYTHONPATH is not correctly set or your
installation partially failed. Check your SETUP.bash/tcsh file and make sure
you are sourcing it properly. Your $PYTHONPATH variable should include
PortageII-cur/lib. That directory should also contain portage_utils.pyc. If it
doesn't, for a source code distribution, "make install" probably didn't
complete successfully.

If casemark.py -lm... failed but casemark.py -h worked, then your
LD_LIBRARY_PATH may be set incorrectly. Your $LD_LIBRARY_PATH should include
PortageII-cur/lib. That directory should also contain libportage_truecasing.so.
If it doesn't, for a source code distribution, "make install" probably didn't
complete successfully. Also, casemark.py requires that Python be compiled
with dynamic library support (see External dependencies below).

If canoe -h says "command not found" but the other commands work:
 - with binary distributions, your $PATH variable must also include the
   architecture specific folder PortageII-cur/bin/<arch>.  Check your
   SETUP.bash/tcsh file and make sure you have set the PRECOMP_PORTAGE_ARCH
   appropriately.  The PortageII-cur/bin/<arch> directory contains all the
   compiled C++ executables.
 - with source distributions, canoe is installed in the same directory as
   tune.py and utokenize.pl, so compilation probably failed if only canoe
   doesn't work.

Binary distributions only:
 - If canoe -h complains about a lib*.so* file not being found, some external
   dependency might be missing or you have the wrong version of a dynamic
   library.  An error about libstdc++.so, GLIBCXX or libgomp.so probably means
   a discrepancy between our compiling environment and your operating system.
   Contact us.
 - If canoe -h says "cannot execute binary file", then we might not have built
   an executable compatible with your computing hardware.  Contact us.


                              Getting Started

Now you're ready to run the PortageII suite of programs.

1- Framework

We also provide a template experimental framework in subdirectory framework.
This is intended as a reasonable out-of-the-box baseline system.  We recommend
you use this framework as your starting point for real experiments.

2- Tutorial

In framework, you will also find the document tutorial.pdf.  This document
walks you through a complete experiment using a toy corpus.  It is intended as
a tutorial to get you started with PortageII.

3- Others

For further documentation, see doc/user-manual.html.

Refer to $HOME/PortageII-cur/tmx-prepro/README for information on how to
pre-process TMX files to use as a training corpus.

Refer to $HOME/PortageII-cur/generic-model/README for instructions on how to
install the PortageII generic models in the generic-model directory.

For instructions on how to install a PortageLive server, refer to the
PortageLive/ subdirectory and the "PortageLive Manual" section of the
PortageII user manual: doc/user-manual.html / Portage Live Manual.


                           Hardware requirements

See doc/system-requirements.pdf, "Performance Information and Required
Configuration", for a discussion of hardware requirements and system
performance on some sample datasets.


                           External dependencies

Before installing PortageII itself, you need to make sure you have the
following dependencies installed.

Note that in the following, we show instructions for installing external
packages to $PORTAGE/third-party, or to $PORTAGE/third-party/<name> in a few
cases.  This is just a suggestion, but if you follow this pattern the default
SETUP.bash/tcsh will pick up things installed there automatically.  We
recommend using $PORTAGE/third-party for simple packages, so they all end up in
$PORTAGE/third-party/{bin,lib}, but for complex packages, such as a manually
installed Python, add <name> for better control.

If you choose different destinations, adjust SETUP.bash/tcsh accordingly.  In
any case, make sure you update the User Configurable Variables section of
SETUP.bash/tcsh.

After installing the third-party packages, source SETUP.bash/tcsh to enable the
packages:
   source $HOME/PortageII-cur/SETUP.bash
or
   source $HOME/PortageII-cur/SETUP.tcsh

Mandatory dependencies for all distributions:

 - Linux - we have tested PortageII on various Linux distributions and it runs
   without problems, as long as the rest of the dependencies are installed.  We
   tested older versions on PC-BSD and Mac OS X.  It worked reasonably well on
   those platforms then, but these are not our regular working platforms and we
   make no guarantees everything will work correctly.  Things also work
   reasonably well on Cygwin, but again we make no guarantees.  We have not
   tested on Solaris at all.

 - A large swap file.  Your system should be configured to have twice as much
   swap space as RAM.  Yes, this is contrary to what most system administrators
   recommend today - typically a one-to-one ratio - but using a two-to-one
   ratio will avoid frustrating problems down the road.  Insufficient swap
   space will sometimes cause crashes due to a "lack of memory" even though
   there appears to be plenty available.

 - Standard utilities: awk, bash (3.0 or more recent), bzip2, (e)grep, gzip,
   head, sed, sort, tail, tar, etc.

 - GNU make 3.81 or more recent - when compiling PortageII and when running the
   experimental framework, our Makefiles use GNU extensions to make, as well as
   features that were introduced in version 3.81.

 - Perl 5.10 or more recent. Older versions do not handle UTF-8 data correctly.
   If you're processing Arabic text, Perl 5.14 or more recent is required.
   If you install Perl in a non-standard location, make sure it comes first on
   your PATH, or set PERL_HOME_OVERRIDE in SETUP.bash/tcsh.

   Using yum: if your distro's package manager has Perl >= 5.14, use it.

   Manual installation (avoid this if you can):

   This worked for us:
      # Obtain perl-5.22.0.tar.gz from www.perl.org
      tar -zxf perl-5.22.0.tar.gz
      cd perl-5.22.0
      ./Configure -des -Dusethreads -Dprefix=$PORTAGE/third-party/perl-5.22.0
      make -j 5
      make -j 5 test
      make -j 5 install

   Tell PortageLive where to find Perl by creating these this symlink:
      ln -s /PATH_TO_PERL/bin/perl /opt/PortageII/bin/perl
   If using multiple PortageLive servers, you need to perform the full Perl
   installation procedure on each of them, unlike other third party software,
   which automatically get installed along with PortageLive itself.

 - Perl packages: the following Perl packages are required to run PortageII:
    - XML::XPath
    - XML::Twig version 3.32 or later, including the xml_grep tool that comes
      with it, and all of XML::Twig's dependencies - used to process XML files
      such as TMX or XLIFF
    - JSON
    - YAML
    - Time::HiRes
    - Normally standard packages, including File::Spec, File::Temp, List::Util,
      Time::gmtime, FindBin.

   To find out if you have a package already, try "perldoc <module>", e.g.,
   "perldoc XML::XPath" or "perldoc JSON".

   If you're using yum or another Linux package manager, installing
   perl-XML-XPath, perl-XML-Twig, perl-JSON, perl-YAML, and perl-Time-HiRes,
   including all dependencies, should do the trick.  This has to be done as
   root.  This is by far the easiest way to go.

   Failing that, you can try using cpan.  Executed as root, or if you compiled
   Perl manually following the instructions above, this might work:
      Install expat-devel using yum
         yum install expat-devel
      Launch "cpan" and do this for any package you don't already have:
         install XML::XPath
         install XML::Twig
         install JSON
         install YAML
         install Time::HiRes
   You have to let cpan install all dependencies.  (Say y or yes to all
   questions.)  You mileage may vary because various compilation steps are
   required.

   If you cannot work as root, you can set up libraries in your user account,
   but some work will be needed to configure CPAN to do so, and then some more
   work will be required so those libraries are seen by Perl at runtime.  Ask
   your sysadmin for help if you don't already know how to do this.

 - Python 2.7 - our tuning script, tune.py and the truecasing module, as well
   as some some convenience scripts, use Python.  In most distros, Python
   should be standard, or available via the package manager, but it might not
   be the right version: version 2.7 (any 2.7.x) is required.

   Recommended: use Conda

   The easiest way to install Python is to use Conda.
   Download and install Miniconda2 (https://conda.io/miniconda.html), the
   smallest Conda package for Python 2.7:
      wget 'https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh'
      sh Miniconda2-latest-Linux-x86_64.sh
   The second command will ask you to accept a license and chose an
   installation location.  $PORTAGE/third-party/miniconda2 or the default
   (~/miniconda2) are good choices. On a PortageLive server,
   /opt/PortageII/miniconda2 is a preferable choice.

   If you install Python 2.7 in a non-standard location, tell PortageII
   training software where to find it by setting PYTHON_HOME_OVERRIDE in
   SETUP.bash/tcsh:
      PYTHON_HOME_OVERRIDE=/path/to/python2.7-or-miniconda2

   Install required Python packages: numpy mock
      # make sure miniconda2/bin is on your path, e.g., by starting a fresh
      # shell, and then:
      conda install numpy mock

   Tell PortageLive where to find Python 2.7 by creating these two symlinks:
      ln -s /path/to/miniconda2/bin/python /opt/PortageII/bin/python
      ln -s /path/to/miniconda2/lib/libpython2.7.so* /opt/PortageII/lib/

   (For more information on setting up PortageLive, see the PortageLive/
   subdirectory as well as the "PortageLive Manual" section of the PortageII
   user manual: doc/user-manual.html / Portage Live Manual.)

 - A language modelling toolkit to train language models.  Our code can read
   and use language models, but we don't provide the training functionality,
   since it is readily available.  We recommend MITLM
   (https://github.com/mit-nlp/mitlm) or SRILM
   (http://www.speech.sri.com/projects/srilm/).  You can also use any other
   package which produces language models in Doug Paul's ARPA format, but note
   that in our experiments, SRILM and MITLM have worked best.

   Installing the current version of MITLM from the Git repo on GitHub is
   easiest:
      # Download ZIP from https://github.com/mit-nlp/mitlm or use Git:
      git clone https://github.com/mit-nlp/mitlm.git
      cd mitlm
      ./autogen.sh --prefix=$PORTAGE/third-party/mitlm
      make -j 5
      make -j 5 install

 - Java - A JRE (Java Runtime Environment) version 1.6 or more recent is
   required to perform decoder weight tuning.  The command "java" must be on
   your PATH.  Running "java -version" should produce something like 1.6.0_nn
   or 1.7.0_nn if your installation is correct.  (Set JAVA_HOME_OVERRIDE in
   SETUP.bash/tcsh if you install it in a non-standard location.)

 - MGIZA++ - PortageII supports combining IBM4 alignments with its own HMM and
   IBM2 alignments for improved phrase table extraction.  IBM4 alignments must
   be generated by an external word-alignment toolkit.  Although any toolkit in
   the giza family should work, we have only tested MGIZA++, a fast,
   multi-threaded implementation.  It is now available from GitHub:
   https://github.com/moses-smt/mgiza

   Note: before you install MGIZA++, you may need to install Python, ICU and
   boost. See elsewhere in this file for details.

   Get and install the current version:
      # Download ZIP from https://github.com/moses-smt/mgiza or use Git:
      git clone https://github.com/moses-smt/mgiza.git
      cd mgiza/mgizapp
      export BOOST_ROOT=/path/to/boost (see boost section later in this file)
      cmake -DCMAKE_INSTALL_PREFIX=$PORTAGE/third-party -DBoost_NO_BOOST_CMAKE=ON .
      make -j 5
      make install

      # If the above fails or you don't have cmake, you can try the manual
      # install instead, from the same git clone:
      cd manual-compile
      # Edit compile.sh and
      #  - set SRC_DIR to mgiza/mgizapp/src
      #  - set BOOST_ROOT to where you installed BOOST (see boost section later
      #    in this file)
      #  - we had to change BOOST_LIBRARYDIR to $BOOST_ROOT/lib, instead of
      #    $BOOST_ROOT/lib64, but the default might work for you as is.
      ./compile.sh
      # Edit transfer.sh to set the scp destination to $PORTAGE/third-party/bin.
      mkdir -p $PORTAGE/third-party/bin
      ./transfer.sh
      # The default transfer.sh script is missing plain2snt-hasvcb.py:
      cp ../scripts/plain2snt-hasvcb.py $PORTAGE/third-party/bin/

   If you have an old download of version 0.6.3 or 0.7.2, or a current one,
   they are all equivalent for our purposes.  If it works, keep what you have.
   We're not aware of any advantages one version has over another, so you can
   chose whichever one you successfully compile.

   Version 0.6.3 can still be found at http://www.cs.cmu.edu/~qing/release/
   and is easier to install. This worked for us:
      # Download the mgizapp-0.6.3 tarball, expand it, and build MGIZA
      wget http://www.cs.cmu.edu/~qing/release/mgiza-0.6.3-10-01-11.tar.gz
      tar -xzf mgiza-0.6.3-10-01-11.tar.gz
      cd MGIZA
      ./configure --prefix=$PORTAGE/third-party
      make -j 5
      make -j 5 install
      # Next we need to manually patch the file plain2snt-hasvcb.py where we
      # need to replace "1" for "2" in line 55 and 70. This fixes a bug present
      # in all MGIZA++ versions from before February 2015.
      sed -i -e '55s/1/2/' -e '70s/1/2/' $PORTAGE/third-party/scripts/plain2snt-hasvcb.py

 - mkcls - this word clustering tool by Franz Och is required for some models
   added to PortageII in version 3.0, in particular the sparse ones. It comes
   with MGIZA++, so follow the instructions above to install it.

 - word2vec - this more recent, fast word clustering tool by Google is now also
   required for some models added to PortageII in version 3.0, in particular
   for our coarse language models. There is no download package available, but
   compilation is easy from source:
      # To compile word2vec, you need gcc-4.4 or newer (requires -Wno-unused-result).
      # Obtain the package from https://github.com/dav/word2vec
      # It is not available as a download file, so you have to do a git
      # clone to obtain the latest version:
      git clone https://github.com/tmikolov/word2vec
      cd word2vec
      make word2vec
   Installation is manual. You can put it anywhere on your path:
      mkdir -p $PORTAGE/third-party/bin
      cp word2vec $PORTAGE/third-party/bin/

 - libsvm - The executable programs that come with the libsvm library are
   needed for Confidence Estimation.  The package is available from
   http://www.csie.ntu.edu.tw/~cjlin/libsvm/ and is very easy to compile.
   Installation is manual but trivial.  Any version should do, as far as we
   know.  This procedure worked for us:
      # Download the current tarball
      wget 'http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz'
      # Expand it
      tar -xzf libsvm-3.20.tar.gz
      # Go in the directory and compile the package
      cd libsvm-3.20
      make
      # "Install" the three executables somewhere on the PATH.
      mkdir -p $PORTAGE/third-party/bin
      cp svm-predict svm-train svm-scale $PORTAGE/third-party/bin/

   If you can work as root, libsvm is available in some Linux distros as a
   package called libsvm-tools or libsvm.  On CentOS, which uses yum, this
   should work:
      # Search for packages called libsvm
      yum search libsvm
      # Find the one matching your architecture, say x86_64:
      yum install libsvm.x86_64

 - xml_grep and xmllint - also required by tmx2lfl.pl.  xml_grep comes with
   XML::Twig.  xmllint is fairly standard and should be available via the
   package manager in most distros.

Optional dependencies for all distributions:

 - ICU - PortageII relies on includes a few tools that use ICU to correctly do
   case-mapping on utf-8 data.  We distribute the ICU libraries with binary
   distributions of PortageII, so you don't need to do anything in that case.

   With source code distributions, we We strongly recommend you install ICU,
   but if you have difficulties with it, you can leave it out.  In that case,
   some functionality will not be available. Set the ICU variable in
   src/Makefile.user-conf to NONE if you leave ICU out, or to your ICU root
   path to enable the compilation of the relevant code.

   With most Linux distros, you just need to install a package called something
   like libicu-dev, and you're done.  In this case the ICU variable is not
   required since the library will be installed in the standard locations.

   If it is not available via your Linux distro, ICU can be downloaded from
   http://icu-project.org/download/.  Any version should do; we've tested 49, 4.0
   and 3.4.
   This worked for us:
      # Download the ICU4C 49 tarball and expand it
      wget 'http://download.icu-project.org/files/icu4c/49.1.2/icu4c-49_1_2-src.tgz'
      tar -xzf icu4c-49_1_2-src.tgz
      mv icu icu-49.1.2
      cd icu-49.1.2/source
      # Run the configuration program
      ./runConfigureICU Linux --prefix=$PORTAGE/third-party/icu
      # Compile and install
      make -j 4 install

 - If you are planning to process Chinese text, you need a Chinese segmenter.
   You can obtain and use ICTCLAS, available in various locations on the web,
   such as https://github.com/pierrchen/ictclas_plus, or NRC's rewrite of the
   LDC/UPENN segmenter, included under third-party/chinese-segmentation/ on
   this CD for convenience.  The latter is easier to install, but ICTCLAS is
   known to produce better results, so we recommend it.

   The NRC rewrite of the LDC/UPENN segmenter comes pre-installed in
   $PORTAGE/third-party/chinese-segmentation, so you don't need to install it.

   The ICTCLAS downloaded from the link provided above can be installed like
   this, but this procedure is sometimes buggy - consult us before trying it:
      # Download ZIP from https://github.com/pierrchen/ictclas_plus or use Git:
      git clone https://github.com/pierrchen/ictclas_plus.git
      cd ictclas_plus/Source
      g++ -c *.cpp
      ar -r ictclas.a *.o
      cd ..
      g++ -o ictclas main.cpp Source/ictclas.a
      mkdir -p $PORTAGE/third-party/bin
      cp -pr ictclas Data $PORTAGE/third-party/bin/

   If you use ICTCLAS, you must also edit tokenize_plugin (in bin/ for binary
   distributions, in src/textutils/ for source distributions) to make your
   choice effective (search for ICTCLAS in that file and follow the
   instructions there).  You must also tell the framework to use ICTCLAS and
   by setting the USE_ICTCLAS variable to 1 in framework/Makefile.params
   (again, search for ICTCLAS in that file).

 - Theano - training NNJMs on your own data using your own GPU-enabled machine
   requires CUDA, cuDNN and Theano. See the Theano Installation page in the
   user manual: doc/user-manual.html / Theano Installation.

Mandatory dependencies for source code distributions:

 - GNU g++ - PortageII compilation has only been tested with g++, and makes use
   of some g++ extensions to C++.  We currently use versions between 4.2.0 and
   4.6.2.  You need 4.2.0 or more recent to take advantage of multi-threading
   via OpenMP, used in some parts of Portage.

 - boost - PortageII makes use of some libraries in the boost C++ libraries
   collection, including the Boost Graph Library, uBLAS, smart pointers,
   iostreams, etc.

   Version 1.44 or more recent is required, because of a bug in earlier
   releases of boost when handling compressed files.

   Some recent distributions of Linux may already include the boost libraries,
   otherwise you can download them from the boost home page.  However, some
   Linux distributions include only parts of boost -- some leave out the Boost
   Graph Library, for example.  If you get errors about missing boost includes
   while compiling Portage, do a complete installation.  Some distros also
   provide a version of boost that is too old.  Make sure you check that you
   are using 1.44 or more recent.

   It is recommended you have your sys admin install boost, but you can also
   install it in your own user space.  Either way, you need to edit
   src/Makefile.user-conf and set BOOST_ROOT to the root directory of your
   boost installation.  The PortageII makefiles are configured to look for the
   boost include files in $BOOST_ROOT/include, and the boost libraries in
   $BOOST_ROOT/lib.

   Boost home page: http://www.boost.org or http://boost.sourceforge.net
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download the boost tarball, say boost_1_NN_0.tar.bz2, by following the
      # download links from the home page.
      # Extract it
      tar -xjf boost_1_NN_0.tar.bz2
      # Go into it
      cd boost_1_NN_0/
      # Auto config using bootstrap.sh, changing the install destination if you
      # want, e.g., $PORTAGE/third-party/boost, $HOME, $HOME/pkgs/boost_1_NN_0
      # or $HOME/boost_1_NN_0, making sure that $BOOST_ROOT points to $DEST,
      # either as an environment variable or in src/build/Makefile.incl.
      ./bootstrap.sh --prefix=$PORTAGE/third-party/boost
      # Build.  This step will take a long time.
      b2 -j4
      b2 -j4 install
      # Edit src/Makefile.user-conf and set the BOOST_ROOT variable to the
      # value of --prefix if you changed it.

Optional dependencies for source code distributions:

 - TCMalloc - PortageII will run much faster if you use this very efficient
   memory allocation library from Google.  You can obtain it here:
   http://code.google.com/p/gperftools/.  After you download and install it,
   set the variable TCMALLOC in src/Makefile.user-conf to enable its use.
   TCMalloc depends on libunwind, so you might have to install that first.  It
   is available at http://www.nongnu.org/libunwind/ if it's not already on your
   system.

   This procedure worked for us:
      # Change the definition of PKG_DIR if you want to install somewhere else.
      # If you cut and paste the PKG_DIR definition to your shell, you will
      # also be able to cut and paste the instructions below into your shell.
      PKG_DIR=$PORTAGE/third-party

      # If necessary, get and install the latest libunwind, 1.1 at the time
      # of updating these instructions:
      wget 'http://download.savannah.gnu.org/releases/libunwind/libunwind-1.1.tar.gz'
      tar -xzf libunwind-1.1.tar.gz
      cd libunwind-1.1/
      ./configure --prefix=$PKG_DIR/libunwind
      make -j 4
      # make check showed errors for us, but they don't seem to affect
      # TCMalloc, so we've been ignoring them.
      make check -j 4
      make install -j 4
      cd ..

      # If you had to install libunwind, define these variables before building
      # gperfools (in your current shell, not in your default configuration):
      export LD_RUN_PATH=$PKG_DIR/libunwind/lib:$LD_RUN_PATH
      export CPATH=$PKG_DIR/libunwind/include
      export LDFLAGS=-L$PKG_DIR/libunwind/lib

      # Get the latest gperftools (which includes TCMalloc), 2.4 when we last
      # updated these instructions:
      # Obtain gperftools-2.4.tar.gz from http://code.google.com/p/gperftools/
      tar -xzf gperftools-2.4.tar.gz
      cd gperftools-2.4
      ./configure --prefix=$PKG_DIR/gperftools
      make CXXFLAGS=-g -j 5
      make CXXFLAGS=-g -j 5 check
      make CXXFLAGS=-g -j 5 install

      # Edit src/Makefile.user-conf and set TCMALLOC=$PKG_DIR/gperftools
      # (here you need to replace $PKG_DIR by its value).

 - CxxTest - our unit testing framework depends on CxxTest, which can be
   downloaded from http://cxxtest.com/.  CxxTest is a very small package
   that is very easy to install, even though it needs to be installed manually.

   This procedure worked for us:
      # Obtain cxxtest-4.4.tar.gz (or the current version) from http://cxxtest.com/
      # Installation is done by simply expanding the tarball in the
      # destination directory
      cd $PORTAGE/third-party
      tar -xzf /PATH/TO/cxxtest-4.4.tar.gz
      # Edit src/Makefile.user-conf and set the CXXTEST variable to
      # $PORTAGE/third-party/cxxtest-4.4

   If you don't install CxxTest, set CXXTEST=NONE in src/Makefile.user-conf.

 - Perl module Test::Doctest is uses for some unit testing.
   Install it using cpan: cpan install Test::Doctest

 - log4cxx - some programs in PortageII use log4cxx to produce debugging
   information.  By default, the use of logging is disabled in PortageII.
   To enable logging, make sure you have log4cxx installed, edit
   src/Makefile.user-conf to set LOG4CXX to the full path with log4cxx is
   installed, and compile again.  The logging facilities are not well
   documented, so you would probably only do this in communication with NRC
   staff, who will explain how to install and use it as necessary.

   The log4cxx home is http://logging.apache.org/log4cxx/ but we strongly
   recommend using an OS distro based installation by your sys admin and not
   try a manual installation.

 - etags and/or ctags - recommended if you program with emacs or vi or related
   programs.  These programs will build the databases needed to enable
   cross-links in these editors.  See your editor's manual for details.

   PortageII uses both ctags and etags by default, but you can disable their
   use by defining PORTAGE_NO_CTAGS and/or PORTAGE_NO_ETAGS to 1 in your
   .<shell>rc file, or by uncommenting the lines "PORTAGE_NO_CTAGS=1" and/or
   "PORTAGE_NO_ETAGS=1" in src/Makefile.user-conf.

 - jq - This command line JSON processor is used to run some unit tests.

 - srilm & mitlm - The instructions above say you can chose the LM toolkit you
   want.  That's true for using PortageII, but some of the unit tests depend on
   srilm and others depend on mitlm.  You can safely ignore those unit test
   failures if you don't have both toolkits installed.

 - asciidoctor - generating the user manual requires asciidoctor.
   http://asciidoctor.org/docs/install-toolchain/


Optional PortageLive dependencies

 - When you install the PortageLive runtime translation server, look at
   PortageLive/va/PLiveVA.pdf for additional dependencies.


MADA and its dependencies

  If you want to process Arabic text, please contact us about MADA.  We have
  used MADA-3.2, which is no longer available, and it has been replaced by
  MADAMIRA, which is only free for research and academic purposes.  A future
  release of PortageII will be based on MADAMIRA.


MADAMIRA

  unzip MADAMIRA-release-20160516-2.1-all.zip $PORTAGE/bin/
  then edit $PORTAGE/bin/MADAMIRA-release-20160516-2.1/config/log4j.properties
  --- original/MADAMIRA-release-20160516-2.1/config/log4j.properties  2016-05-16 18:00:40.000000000 -0400
  +++ /opt/PortageII/bin/MADAMIRA-release-20160516-2.1/config/log4j.properties    2017-01-27 12:02:13.914211567 -0500
  @@ -8 +8 @@
  -log4j.appender.A1.File=log4j.log
  +log4j.appender.A1.File=${PORTAGE_LOGS}/madamira.log4j.log


Warnings for PortageLive
  We have previously mentionned having to symbolic link Perl & Python into
  /opt/PortageII/{bin,lib}.  Be aware that, if you had to compile some other
  dependencies to get PortageII running, you might also have to symbolic link
  them into /opt/PortageII the same way you did for Perl & Python.  This is due
  to the fact that PortageLive's web server runs in a more restrictive
  environment where it doesn't have access to all software and is limited to
  /opt/PortageII/{bin,lib}.


jQuery:
  jQuery is used by $PORTAGE/PortageLive/www/phraseAlignmentVisualization.html
  when a user wants to visualize phrase alignments after having translated a
  sentence using plive.cgi.
    mkdir $PORTAGE/third-party/jquery
    wget -O $PORTAGE/third-party/jquery/jquery-2.1.1.min.js \
      'http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'




                              Acknowledgments

We would like to acknowledge the help of Marc Tessier, as well as the feedback
from several other users, in improving these installation notes.

