                             PORTAGEshared_v1.3

Technologies langagieres interactives / Interactive Language Technologies
Institut de technologie de l'information / Institute for Information Technology
Conseil national de recherches Canada / National Research Council Canada
Copyright 2004-2009, Sa Majeste la Reine du Chef du Canada
Copyright 2004-2009, Her Majesty in Right of Canada

Distributed under specific licensing terms.  Please refer to your signed
license agreement for details.


                          Installing PORTAGEshared

We don't use autoconf, so the installation is done manually, but we tried to
keep it as simple as possible.

Copy the full contents of the CD to a directory of your choice, say
$HOME/PORTAGEshared.
   cp -prd /CDlocation/PORTAGEshared $HOME/PORTAGEshared
or
   rsync -av /CDlocation/PORTAGEshared $HOME/PORTAGEshared

Some users have reported needing to run "chmod +w" on some files or directories
after the cp or rsync above.  Running "chmod -R +w $HOME/PORTAGEshared" might
solve this problem.

If you chose a location other than $HOME/PORTAGEshared, edit SETUP.bash and
SETUP.tcsh and change the value of the PORTAGE variable to the actual location
where your installed PORTAGEshared, and adjust the next steps below
accordingly.

Add $HOME/PORTAGEshared/{bin,lib,include} to the appropriate environment
variables by sourcing $HOME/PORTAGEshared/SETUP.bash or SETUP.tcsh (depending
on your preferred shell - if you use a shell other than bash or csh/tcsh,
you're on your own):
   source $HOME/PORTAGEshared/SETUP.bash
or
   source $HOME/PORTAGEshared/SETUP.tcsh

For source code distributions :

   Resolve any dependencies (see External dependencies, below).
   Review src/Makefile.user-conf and make any changes needed to reflect your
   system configuration and choices.
   Compile and install PORTAGEshared:
      cd src
      gmake -j 5
      gmake -j 5 install
   We typically use -j N for parallel compiling.  N = 1 + the number of CPUs on
   the machine seems to be optimal.  If you're sharing the machine with many
   users, however, you may not want to use the -j switch at all.


                        Verifying your installation

Once PORTAGEshared is installed, execute these three commands to make sure you
can run the software:
   cow.sh -h
   tokenize.pl -h
   canoe -h
These three commands invoke programs that are each installed differently, and
exercise the key parts of PORTAGEshared installation.  If everything is OK,
each will give you usage information about the command.

If cow.sh -h or tokenize.pl -h says "command not found", your PATH is not
correctly set or your installation failed.  Check your SETUP.bash/tcsh file and
make sure you are sourcing it properly, ideally in your .<shell>rc file.  Your
$PATH variable should include PORTAGEshard/bin.  Also check that
PORTAGEshared/bin contains tokenize.pl.  If that's not the case, "gmake
install" probably didn't complete successfully.

If tokenize.pl -h says "Can't locate LexiTools.pm in @INC ...", then your
PERL5LIB is not correctly set or your installation partially failed.  Check
your SETUP.bash/tcsh file and make sure you are sourcing it properly, ideally
in your .<shell>rc file.  Your $PERL5LIB variable should include
PORTAGEshared/lib.  That directory should also contain LexiTools.pm.  If it
doesn't, "gmake install" probably didn't complete successfully.

If canoe -h says "command not found" but the other two commands work:
 - with binary distributions, your $PATH variable must also include the
   architecture specific folder PORTAGEshared/bin/<arch>.  Check your
   SETUP.bash/tcsh file and make sure you have set the PRECOMP_PORTAGE_ARCH
   appropriately.  The PORTAGEshared/bin/<arch> directory contains all the
   compiled C++ executables.
 - with source distributions, canoe is installed in the same directory as
   cow.sh and tokenize.pl, so compilation probably failed if those scripts work
   but canoe doesn't.

Binary distributions only:
 - If canoe -h complains about a lib*.so* file not being found, some external
   dependency might be missing or you have the wrong version of a dynamic
   library.  An error about libstdc++.so, GLIBCXX or libgomp.so probably means
   your version of g++ is older than the one we used to compile PORTAGEshared.
   You might need a newer version: you won't use the compiler, but you still
   need its dynamic libraries.  See the ICU section below if your get an error
   about libicu*.so.
 - If canoe -h says "cannot execute binary file", then we might not have built
   an executable compatible with your computing hardware.  Contact us.


                              Getting Started

Now you're ready to run the PORTAGEshared suite of programs.

We also provide a template experimental framework in subdirectory framework.
This is intended as a reasonable out-of-the-box baseline system.  We recommend
you use this framework as your starting point for real experiments.

In framework, you will also find the document framework-toy.pdf.  This document
walks you through a complete experiment using a toy corpus.  It is intended as
a tutorial to get you started with PORTAGEshared.

For further documentation, see doc/user-manual.html.


                              Applying a patch

If you have already installed PORTAGEshared before and wish to upgrade to this
version, you can apply a patch instead of making a fresh copy, if a suitable
one is provided with your distribution:
   cd $HOME/PORTAGEshared
   patch -p2 < /CDlocation/OLD_REV_to_NEW_REV.patch

Use patches with care if you have made any changes to PORTAGEshared!  Any
changes you made *should* be merged with changes we made between releases, but
such merging might lead to problems and/or conflicts, so it is strongly advised
that you work on a backup, and carefully read the patch man page to see how
conflicts are handled and how you can resolve them.


                           External dependencies

Before installing PORTAGEshared itself, you need to make sure you have the
following dependencies installed.

Mandatory dependencies for all distributions:

 - Linux - we have tested PORTAGEshared on various Linux distributions and it
   runs without problems, as long as the rest of the dependencies are
   installed.  We have also tested PORTAGEshared on PC-BSD and Mac OS X.  It
   seems to work reasonably well on those platforms too, but these are not our
   regular working platforms so we make no guarantees everything will work
   correctly.  We have not tested on Solaris yet, but we plan to do so at a
   later date.

 - Standard utilities: bash (3.0 or more recent), perl, grep, egrep, sort,
   gzip, tail, head, sed, awk, etc.

 - A language modelling toolkit to train language models.  Our code can read
   and use language models, but we don't provide the training functionality,
   since it is readily available.  If your licensing requirements allow it, we
   recommend SRILM (http://www.speech.sri.com/projects/srilm/).  You can also
   use IRSTLM (http://sourceforge.net/projects/irstlm) or any other package
   which produces language models in Doug Paul's ARPA format, but in our
   experiments, we find that SRILM works best for us.

Optional dependencies for all distributions:

 - SRILM's ngram and compute-best-mix programs, if you want to use the
   adaptation module (if your licensing requirements allow it).

 - ICU - PORTAGEshared includes a few tools that use ICU to correctly do
   case-mapping on utf8 data.  This functionality will be disabled if ICU is
   not available.  ICU is only required to use the utf8 casemapping
   functionality of DynMap LMs, so in most cases you will not need this
   library, and can safely leave it out, at least to get started.

   With binary only distributions, use programs and libraries in bin/<arch>-icu
   and lib/<arch>-icu if you have ICU, or programs in libraries in bin/<arch>
   and lib/<arch> if you don't.  The choice of which executables to use is best
   done by editing the user configurable variables in SETUP.bash and
   SETUP.tcsh.  Unfortunately, dynamic ICU libraries of different versions are
   not interchangeable, so you must have the same version we compiled with to
   use the ICU version.  If you run "ldd bin/<arch>/canoe", you should see a
   line in the output reading "libicuuc.so.NN => ...".  The number after .so
   tells you what version we compiled with, e.g., 40 means 4.0 (the minor
   version number does not matter, e.g., 3.4.1 is OK for 34).  The text after
   the arrow will either say "not found", in which case you have a problem, or
   it will give the path to this file, in which case things should work.  If
   you have installed the right version of ICU and this command still says "not
   found", add the path where the libicuuc.so.NN file is found to your
   LD_LIBRARY_PATH environment variable, e.g., by editing SETUP.bash and
   SETUP.tcsh as described below.

   With source code distributions, if you install ICU, edit the ICU variable in
   src/Makefile.user-conf to enable the compilation of the relevant code.
   
   If it is not already available via your Linux distro, ICU can be downloaded
   from http://icu-project.org/download/.
   This procedure worked for us:
      # Download the ICU4C 4.0 and expand it
      wget http://download.icu-project.org/files/icu4c/4.0/icu4c-4_0-src.tgz
      tar -xzf icu4c-4_0-src.tgz
      cd icu/source
      # Run the configuration program - replace $DEST with your preferred
      # destination, e.g., $PORTAGE, $HOME, $HOME/pkgs or $HOME/icu.
      ./runConfigureICU Linux --prefix=$DEST
      # Compile and install
      make install
      # Edit src/Makefile.user-conf and set the ICU variable to $DEST.
      # You may also need to edit SETUP.bash and SETUP.tcsh and add :$DEST/lib
      # at the end of the two expressions setting LD_LIBRARY_PATH.

Mandatory dependencies for source code distributions:

 - GNU g++ - PORTAGEshared compilation has only been tested with g++, and makes
   use of some g++ extensions to C++.  It compiles fine with all versions we've
   tested between 3.3.3 and 4.3.2.

 - GNU make - our makefile makes use of GNU extensions to make, so you must use
   gmake (which can be invoked using "make" on most Linux distributions).

 - boost - PORTAGEshared makes use of some libraries in the boost C++ libraries
   collection, including the Boost Graph Library, uBLAS, smart pointers, etc.
   Any version since 1.33 should do.

   Some recent distributions of Linux may already include the boost libraries,
   otherwise you can download them free from the boost home page.  Note,
   though, that some Linux distributions include only parts of boost--some
   leave out the Boost Graph Library, for example.  If you get errors about
   missing boost includes while compiling Portage, do a complete installation
   of a recent version of boost.

   It is recommended you have your sys admin install boost, but you can also
   install it in your own user space.  Either way, you need to edit
   src/Makefile.user-conf and set BOOST_ROOT to the root directory of your
   boost installation.  The PORTAGEshared makefiles are configured to look for
   the boost include files in $BOOST_ROOT/include, and the boost libraries in
   $BOOST_ROOT/lib.

   Boost home page: http://www.boost.org or http://boost.sourceforge.net
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download the boost tarball, currently boost_1_36_0.tar.bz2, by
      # following the download links from the home page.  PORTAGEshared does
      # not require the latest version.
      # Extract it
      tar -xjf boost_1_36_0.tar.bz2
      # Go into it
      cd boost_1_36_0/
      # Run autoconf, with overridden install destination - replace $DEST
      # with your preferred destination, e.g., $PORTAGE, $HOME, $HOME/pkgs or
      # $HOME/boost, making sure that $BOOST_ROOT points to $DEST, either as en
      # environment variable or in src/build/Makefile.incl.
      ./configure --prefix=$DEST
      # Build.  This step will take a long time.
      make -k
      # Install to $DEST/{include,lib}
      make -k install
      # Edit src/Makefile.user-conf and set the BOOST_ROOT variable to $DEST.

Optional dependencies for source code distributions:

 - ACE - PORTAGEshared includes an API you can use to embed the decoder in your
   application, as well as a demo that can be placed on a web page.  This demo
   requires ACE.

   By default, the Makefile will not build the demo, but if you have ACE you
   can enable its compilation by commenting out the line "ACE=NONE" in
   src/api/Makefile.

   ACE home page: http://www.cs.wustl.edu/~schmidt/ACE.html
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download and expand the ACE-5.5 tarball (but older versions should work
      # too).
      wget http://deuce.doc.wustl.edu/ACE-5.5.tar.gz
      tar -xzf ACE-5.5.tar.gz
      cd ACE_wrappers
      # At this point, useful help can be found by typing:
      #   "links ACE-INSTALL.html#unix_autoconf"
      # The following more or less follows the instructions found there.
      # Create a platform specific build directory and go there
      mkdir -p build/i686
      cd build/i686
      # Run autoconf - replace $DEST with your preferred destination, e.g.,
      # $PORTAGE, $HOME, $HOME/pkgs or $HOME/ace.
      # (This step takes a long time.)
      ../../configure --prefix=$DEST
      # Compile (if your are using (t)csh, add "env" in front of this command)
      # (This step takes a long time; add -j 5 to speed it up.)
      ACE_ROOT=`pwd` make
      # Install to $DEST/{include,lib} (if your are using (t)csh, add "env"
      # in front of this command)
      ACE_ROOT=`pwd` make install
      # Edit src/Makefile.user-conf and set the ACE variable to $DEST.

 - CxxTest - our unit testing framework depends on CxxTest, which can be
   downloaded from http://cxxtest.tigris.org/.  CxxTest is a very small package
   that is very easy to install, even though it needs to be installed manually.

   This procedure worked for us:
      # Download and expand the package
      wget http://cxxtest.tigris.org/files/documents/6421/43281/cxxtest-3.10.1.tar.gz 
      tar -xzf cxxtest-3.10.1.tar.gz
      cd cxxtest
      # Manual installation - replace $DEST with your preferred destination, e.g.
      # $PORTAGE, $HOME, $HOME/pkgs or $HOME/cxxtest.
      # Create $DEST/include if it doesn't already exist; install includes.
      mkdir -p $DEST/include
      cp -pr cxxtest $DEST/include/
      # Create $DEST/bin if it doesn't already exist; install cxxtestgen.pl.
      mkdir -p $DEST/bin
      cp -p cxxtestgen.pl $DEST/bin/
      # Edit src/Makefile.user-conf and set the CXXTEST variable to $DEST.

 - log4cxx - some programs in PORTAGEshared use log4cxx to produce debugging
   information.  By default, the use of logging is disabled in PORTAGEshared.
   To enable logging, make sure you have log4cxx installed, comment out the
   line "LOGGING=NONE" in src/build/Makefile.incl, and compile again.  The
   logging facilities are not well documented, so you would probably only do
   this in communication with ILT staff, who will explain how to use it as
   necessary.

   log4cxx home: http://logging.apache.org/log4cxx/.
   This procedure worked for us, and may help you install it yourself, if your
   sys admins can't do it globally for you:
      # Download log4cxx-0.9.7.tar.gz by following the download links from the
      # log4cxx home page.
      # Expand the package
      tar -xzf log4cxx-0.9.7.tar.gz
      cd log4cxx-0.9.7
      # Run autoconf - see notes about $DEST/log4cxx in the boost section above.
      ./autogen.sh
      ./configure -with-XML=no --prefix=$DEST/log4cxx
      # Compile (add -j 5 to speed up this step)
      make
      # Install to $DEST/log4cxx/{include,lib}
      make install
      # Edit src/Makefile.user-conf and set the LOG4CXX variable to $DEST.

 - etags and/or ctags - recommended if you program with emacs or vi or related
   programs.  These programs will build the databases needed to enable
   cross-links in these editors.  See your editor's manual for details.

   PORTAGEshared uses both ctags and etags by default, but you can disable
   their use by defining PORTAGE_NO_CTAGS and/or PORTAGE_NO_ETAGS to 1 in your
   .<shell>rc file, or by uncommenting the lines "#PORTAGE_NO_CTAGS=1" and/or
   "#PORTAGE_NO_ETAGS=1" in src/Makefile.user-conf.


Using PORTAGEshared on Cygwin:

We don't officially support Cygwin, nor do we recommend using it, since the
programs in PORTAGEshared will run much more slowly than on Linux, but here
are some known issues in case you really want to use it:
 - Programs will typically run more slowly on Cygwin than on Linux.
 - A lot of warnings are produced during compilation that don't show up under
   Linux.  We think it is safe to ignore them, but we can't guarantee it.
