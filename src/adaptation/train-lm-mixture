#!/bin/bash
# $Id$

# train-lm-mixture
# 
# PROGRAMMER: GF
# 
# COMMENTS:
#
# Technologies langagieres interactives / Interactive Language Technologies
# Institut de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2006, Sa Majeste la Reine du Chef du Canada /
# Copyright 2006, Her Majesty in Right of Canada

usage() {
   for msg in "$@"; do
      echo $msg >&2
   done
   cat <<==EOF== >&2

train-lm-mixture [-v][-order n] ngram-models text-file

Train a mixture of ngram language models using EM on a given text file.
<ngram-models> is a file containing a list of the ngram models to use, one per
line. The results are a set of normalized weights written to stdout.

Options:
-v        increment the verbosity level by 1 (may be repeated)
-order    set max ngram order [4]

==EOF==

    exit 1
}

error_exit() {
   for msg in "$@"; do
      echo $msg >&2
   done
   echo "Use -h for help." >&2
   exit 1
}

arg_check() {
   if [ $2 -le $1 ]; then
      error_exit "Missing argument to $3 option."
   fi
}

# Command line processing

VERBOSE=0
order=4

while [ $# -gt 0 ]; do
   case "$1" in
   -order)              arg_check 1 $# $1; order=$2; shift;;
   -v|-verbose)         VERBOSE=$(( $VERBOSE + 1 ));;
   -h|-help)            usage;;
   --)                  shift; break;;
   -*)                  error_exit "Unknown option $1.";;
   *)                   break;;
   esac
   shift
done

if [ $# -ne 2 ]; then error_exit "Expecting 2 arguments!"; fi

modelfile=$1
textfile=$2

local_textfile=`basename $textfile`

n=`wc -l < $modelfile`
uniform=`yes | head -$n | perl -ne 'printf("%1.6f ", 1.0/'$n');'`

# Calculate perplexity files for compute-best-mix

pplfiles=
for model in `cat $modelfile`; do
   if [ $VERBOSE -gt 0 ]; then echo $model >&2 ; fi
   local_model=`basename $model`
   pplfile=$local_model.$local_textfile.ppl
   ngram -debug 2 -order $order -lm $model -ppl $textfile > $pplfile
   pplfiles="$pplfiles $pplfile"
done

# Do EM

if [ $VERBOSE -gt 0 ]; then echo "running EM:" >&2; fi
compute-best-mix lambda="$uniform" $pplfiles | perl -pe 's/^[^(]*\(//o;s/\)//o;' | tr ' ' '\n'

rm $pplfiles
