/**
 * \mainpage
 *
 * This is the programmer documentation for the C++ components of
 * PortageII 2.1.  It is automatically generated from the source code.
 * Programmer documentation for other components is found in the source code
 * only.
 *
 * Over time, the system has evolved to include a large number of modules, each
 * of which creates its own library for potential use by other modules.
 * Each module is stored in its own directory.  The most intuitive point of
 * entry into this documentation, therefore, is the list of directories, which
 * you can consult by clicking on the "Directories" tab above.
 *
 * Here is a brief description of each module, in approximately logical order:
 * - \a utils: General-purpose utilities.
 * - \a textutils: Basic text processing utilities (mostly scripts).
 * - \a logging: Logging facility for debugging.
 * - \a preprocessing: Markup, tokenization, etc (perl scripts), sentence alignment.
 * - \a lm: Library for using various types of language models.
 * - \a tm: Translation model training.
 * - \a distortion: Lexicalized distortion model training.
 * - \a adaptation: Mixture-model adaptation.
 * - \a eval: Automatic evaluation of MT output.
 * - \a canoe: Decoder, including code for using phrase tables.
 * - \a rescoring: N-best list reordering using a variety of features.
 * - \a confidence: confidence estimation (in Perl only).
 * - \a truecasing: Restore natural case to text.
 */

/**
 * \dir adaptation
 * \brief Mixture-model adaptation.
 *
 * Training of mixture LMs and TMs.
 */

/**
 * \dir canoe
 * \brief Decoder, including code for using phrase tables.
 *
 * This is the most important component of PortageII: the decoder and all its
 * features.
 */

/**
 * \dir confidence
 * \brief Confidence Estimation
 *
 * Run the decoder, estimating how confident the system is in the quality of
 * the output.
 */

/**
 * \dir distortion
 * \brief Lexicalized and Hierarchical Distortion models
 *
 * This module has the code required to train distortion models.
 */

/**
 * \dir eval
 * \brief Automatic evaluation of MT output.
 *
 * Including BLEU, PER, WER, an oracle, etc.
 */

/**
 * \dir lm
 * \brief Library for using various types of language models.
 */

/**
 * \dir logging
 * \brief Logging facility for debugging.
 */

/**
 * \dir preprocessing
 * \brief Markup, tokenization, etc (perl scripts), sentence alignment.
 *
 * Most of this module's code is not in C++, but this documentation only lists
 * C++ files.  Have a look at the files in this directory directly for the rest
 * of the documentation.
 */

/**
 * \dir rescoring
 * \brief N-best list reordering using a variety of features.
 */

/**
 * \dir textutils
 * \brief Basic text processing utilities.
 */

/**
 * \dir tm
 * \brief Translation model training.
 *
 * This module contains all the code relevant to build phrase tables.
 */

/**
 * \dir tp_models
 * \brief Tightly packed models: TPPTs, TPLMs.
 *
 * This module contains all the code relevant to convert language models,
 * translation models, lexicalized distortion models into their tightly-packed
 * equivalents, as well as code to use these models.
 */

/**
 * \dir tpt
 * \brief Tightly packed tries, suffix arrays and related code.
 *
 * This module contains the tightly-packed data structures, i.e., the building
 * blocks for the tightly-packed models found in tp_models.
 */

/**
 * \dir truecasing
 * \brief Restore natural case to text.
 *
 * The main programs in this directory are in Perl, so their documentation is
 * not included here; it is found in the scripts themselves.
 */

/**
 * \dir utils
 * \brief General-purpose utilities.
 *
 * This directory contains a lot of general-purpose utilities providing all
 * sorts of frequently used functions not already included in the STL or boost.
 *
 * A number of utilities in this directory are in bash, perl and python; this
 * document only includes C++ code: documentation for the scripts can be found
 * within the scripts themselves.
 */

/**
 * \dir word_align
 * \brief Word alignment models
 *
 * This module contains all the code relevant to train and use word-alignment
 * models: the IBM1/2/HMM word alignment models.
 */

