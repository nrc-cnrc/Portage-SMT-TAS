# =============================================================================
# MODULE: Makefile.incl - include file for lower-level Makefiles
#
# PROGRAMMERS: George Foster, Aaron Tikuisis, Eric Joanis,
#              Patrick Paul, Samuel Larkin
#
# This defines a bunch of standard targets in terms of variables that list
# files, directories, commands, etc. All the local make has to do is list local
# contents, then include this file afterwards. See "Content variables" below
# for types of things that can be listed, and "Targets" for how things get
# made.  Detailed comments are at the end.
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2005, Sa Majeste la Reine du Chef du Canada /
# Copyright 2005, Her Majesty in Right of Canada
# =============================================================================

# Read in all user-configurable variables
include ../Makefile.user-conf

# Default values
DOXYFILE ?= ../build/Doxyfile
ifndef SOURCES
   ifneq ($(wildcard *.cc),)
      SOURCES = $(wildcard *.cc)
   endif
endif
ifndef INCLUDES
   ifneq ($(wildcard *.h),)
      INCLUDES = $(wildcard *.h)
   endif
endif

INSTALL_DIR = ../..

OSTYPE = $(shell uname -s)
ifneq (,$(findstring CYGWIN,$(OSTYPE)))
   OSTYPE = CYGWIN
   NO_PORTAGE_OPENMP = 1
endif

# -----------------------------------------------------------------------------
# Static variable definitions (don't usually need to be modified)
# -----------------------------------------------------------------------------

# places to put things
INC_DIR := $(INSTALL_DIR)/include
DOC_DIR := $(INSTALL_DIR)/doc/software
LIB_DIR := $(INSTALL_DIR)/lib
BIN_DIR := $(INSTALL_DIR)/bin
DATA_DIR := $(INSTALL_DIR)/data
PERL_LIB_DIR := $(INSTALL_DIR)/lib

# If BOOST_ROOT is defined, pull boost from there
ifdef BOOST_ROOT
   BOOST_LIB_DIR = -L$(BOOST_ROOT)/lib
   BOOST_INC_DIR = -isystem $(patsubst %/boost,%,$(wildcard $(BOOST_ROOT)/include/*/boost))
   ifeq ($(strip $(BOOST_INC_DIR)),-I)
      $(error Cannot find boost include directory under BOOST_ROOT=$(BOOST_ROOT).  Please set BOOST_ROOT to the directory where boost is installed)
   endif
endif

ifeq ($(ICU), NONE)
   ICU_INC_DIR=-DNOICU
else
   LIBICU=-licuuc
   ifneq ($(ICU),)
      ICU_INC_DIR=-isystem$(ICU)/include
      ICU_LIB_DIR=-L$(ICU)/lib
      ifneq ($(LD_LIBRARY_PATH),)
         export LD_LIBRARY_PATH:=$(LD_LIBRARY_PATH):$(ICU)/lib
      else
         export LD_LIBRARY_PATH=$(ICU)/lib
      endif
   endif
endif

# places to find things; include the -L flag, eg -L/my-other-lib-dir
PORTAGE?=/home/portage
OTHER_INC_DIRS = $(BOOST_INC_DIR) $(ICU_INC_DIR) -isystem$(PORTAGE)/include
OTHER_LIB_DIRS = $(BOOST_LIB_DIR) $(ICU_LIB_DIR) -L$(PORTAGE)/lib

# lib and include directories due to MODULE_DEPENDS
MODULE_LIB_DIR = $(foreach DIR, $(MODULE_DEPENDS), -L../$(DIR))
MODULE_INCLUDE = $(foreach DIR, $(MODULE_DEPENDS), -I../$(DIR))
# Automatically add to LIBS all libraries resulting from dependencies in
# MODULE_DEPENDS, adding utils unless we're in utils.
ifeq ($(NO_UTILS_LIB), true)
   LIB_LIST = $(MODULE_DEPENDS)
else
   LIB_LIST = $(MODULE_DEPENDS) utils
endif
LIBS = $(foreach DIR, $(LIB_LIST), -lportage_$(DIR)) -lboost_iostreams${BOOSTLIBTAG} -lz $(EXTRA_LIBS)

# We used to disable logging by defining LOGGING=NONE, now we do so by defining
# LOG4CXX=NONE, but still look for LOGGING=NONE in case someone depends on it.
ifeq ($(LOGGING), NONE)
    LOG4CXX = NONE
endif

# If the variable LOGGING is defined to the value NONE, turn off the
# compilation and linking with LOG4CXX
ifeq ($(LOG4CXX), NONE)
   CFLAG_LOGGING = -DNO_LOGGING
   LOGGING_LIB =
else
   CFLAG_LOGGING =
   LOGGING_LIB = -llog4cxx -Wl,-Bdynamic -lpthread -Wl,-Bstatic
endif

# Disable all checking in boost::ublas, since they're very expensive, unless
# UBLAS_DEBUG is defined.
ifndef UBLAS_DEBUG
   BOOST_CF = -DBOOST_UBLAS_INLINE=inline -DBOOST_UBLAS_USE_FAST_SAME \
              -DBOOST_UBLAS_CHECK_ENABLE=0 -DBOOST_UBLAS_TYPE_CHECK=0
else
   BOOST_CF =
endif

# flags and commands
#
# The variables CF and FIRST_CF can be used to specify additional compiler
# flags.  Flags in CF are added at the end of the flags, while flags in
# FIRST_CF are added at the beginning.
# You can specify their value on the make command line, .e.g:
#    make CF=-g buggy_prog          # keep debugging info
#    make CF='-g -O0' buggy_prog    # also turn off all optimizations
# FIRST_CF is useful if you want specify a custom library location:
#    make FIRST_CF='-L/my/custom/lib -I/my/custom/include'

CC = gcc
CXX = g++

# OPTS is for compilation and linking options
ifeq ($(OSTYPE),CYGWIN)
    OPTS = -O3 -fno-strict-aliasing -D$(OSTYPE) $(CF)
else
    OPTS = -O3 -fPIC -fno-strict-aliasing -D$(OSTYPE) $(CF)
endif
# COPTS is for compilation only options
COPTS = -Wall -Werror $(BOOST_CF) $(CFLAG_LOGGING) $(MODULE_CF)
# LFLAGS is only for -L options: library search path for linking
LFLAGS = -L. -L../utils $(MODULE_LIB_DIR) $(OTHER_LIB_DIRS)
# IFLAGS is only for -I options: include search path
IFLAGS = -I. -I../utils $(MODULE_INCLUDE) $(OTHER_INC_DIRS)

# If you need to modify compiler options, do so in the above 4 variables, not
# in the following 3!  CFLAGS is used by default to compile C source files,
# CXXFLAGS for C++ source files, and LINKFLAGS for linking.
CFLAGS = $(FIRST_CF) $(IFLAGS) $(COPTS) $(OPTS)
CXXFLAGS = $(CFLAGS)
ifeq ($(OSTYPE),CYGWIN)
   LINKFLAGS = $(FIRST_CF) $(LFLAGS) $(MODULE_LF) -Wl,--enable-auto-import $(OPTS)
else
   LINKFLAGS = $(FIRST_CF) $(LFLAGS) $(MODULE_LF) $(OPTS)
endif

ifeq ($(OSTYPE),Darwin)
   LINKWITH = $(LIBS)
else
   LINKWITH = -Wl,-Bstatic $(LIBS) -Wl,-Bdynamic
endif

# -----------------------------------------------------------------------------
# Content variables (set these in local Makefile to describe what local dir has
# to offer)
# -----------------------------------------------------------------------------

# C/C++ source files
# SOURCES =

# All .h files to be installed in the include dir
# INCLUDES =

# All objects for library inclusion and/or program linking
# OBJECTS =

# Name of library, minus extension, eg libhorrible
# LIBRARY =

# Name of perl modules to install in LIB_DIR
# PERL_LIBS =

# Programs for static linking with local libs. Each must have a corresponding
# program.c or program.cc.
# PROGRAMS =

# Programs for dynamic linking with local libs. Each must have a corresponding
# program.c or program.cc. LD_LIBRARY_PATH needs to be set to $(LIB_DIR) in
# order to run these.
# DYNPROGS =

# Programs you don't want installed in bin; should be a subset of PROGRAMS
# and DYNPROGS
# TESTPROGS =

# Scripts to install by copying into the bin dir without compiling or
# stripping.
# BINSCRIPTS =

# Info doc files. This is a list of .info files, each of which must have a
# corresponding .texinfo file.
# INFOFILES =

# PDF documents generated from LaTeX source. A list of .pdf files, each of
# which must have a corresponding .tex (latex) source file.
# DOCUMENTS =

# External non-standard libs to link against, for instance ones in LIB_DIR.
# DYNLIBS link to shared libraries, when these exist.
# EXTRA_LIBS =
# DYNLIBS =

# Doxygen params file.
# DOXYFILE =

# Dependencies of this module on other modules in the same project.  Adding,
# e.g., "MODULE_DEPENDS = foo bar", will add ../foo and ../bar to the
# include and lib directories, and add -llibportage_foo and -llibportage_bar to
# libraries to link with.  The order of these dependencies affects the order of
# linking of the libraries and is therefore significant.
# MODULE_DEPENDS =

# Additional compile-time flags required for this library
# MODULE_CF =

# Additional link-time flags required for this library
# MODULE_LF =

# Additional files that make clean should delete
# OTHER_GENERATED_FILES =

# -----------------------------------------------------------------------------
# Targets
# -----------------------------------------------------------------------------


.PHONY: new all clean lib dyn_lib bin TAGS tags info doxy \
	docs install export install_inc install_dyn_lib install_static_lib \
	install_perl_lib install_bin install_doc test runcxxtest FORCE

# Override the default suffix list, to remove .sh.  (The make manual says .sh
# is a cludge for the SCCS revision control system, which we don't use.)
.SUFFIXES:
.SUFFIXES: .out .a .ln .o .c .cc .C .p .f .F .r .y .l .s .S .mod .sym .def \
           .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .elc .el .cpp

# make everything that can be made, except doxy, which spews too many messages
all: lib bin TAGS tags info test .cvsignore

# make everything from scratch
new: clean
	$(MAKE) all

# put everything where it belongs, as needed for using the software
install: all install_perl_lib install_bin

# put the include files and static libraries where they belong, as needed for
# an external program using Portage libraries.
export: all install_inc install_static_lib install_dyn_lib

# compose for top-level makefile
new_install: clean
	$(MAKE) install

# go up once to build all required libraries
lib-deps:
	$(MAKE) -C .. $(foreach L,$(MODULE_DEPENDS) utils,$L/lib)

# Utility target
FORCE::

# remove everything that can be remade
clean: clean_testrunners
	\rm -f $(OBJECTS) $(LIBRARY).{a,so} $(PROGRAMS) $(DYNPROGS) \
	$(INFOFILES) $(DOCUMENTS) .cvsignore Makefile.depend \
        *.aux *.bbl *.blg *.dvi *.log TAGS tags *~ *.o *.info-* core core.* \
        $(OTHER_GENERATED_FILES) \
	$(LEGACY_TESTS) $(foreach legacy_test, $(LEGACY_TESTS), $(legacy_test).o)
	\rm -rf .deps

# make the .cvsignore file, used by CVS to ignore certain files when updating
.cvsignore: Makefile ../build/Makefile.incl
	echo $(PROGRAMS) Makefile.depend .cvsignore *.pdf *.dvi *.aux *.bbl *.blg *.log *.eps .deps | tr ' ' '\n' > $@
	if [[ -d tests ]]; then echo .cvsignore $(notdir $(CXXTEST_RUNNERS) $(CXXTEST_RUNNERS_O) $(CXXTEST_RUNNERS_CC)) | tr ' ' '\n' > tests/$@; fi
	if [[ -d tests/legacy ]]; then echo .cvsignore $(foreach legacy_test, $(notdir $(LEGACY_TESTS)), $(legacy_test){,.o}) | tr ' ' '\n' > tests/legacy/$@; fi

# make static and dynamic libraries
lib: $(LIBRARY).a
dyn_lib: $(LIBRARY).so
ifneq ($(OSTYPE),Darwin)
$(LIBRARY).a: $(OBJECTS)
ifdef LIBRARY
	$(AR) r $@ $?
endif
$(LIBRARY).so: $(OBJECTS)
ifdef LIBRARY
	$(CXX) -shared -o $(LIBRARY).so $(OBJECTS) $(LFLAGS) $(LIBS) $(DYNLIBS)
endif
else
$(LIBRARY).a: $(OBJECTS)
ifdef LIBRARY
	libtool -static -o $(LIBRARY).a $(OBJECTS)
endif
$(LIBRARY).so:
endif

# Compile and execute unit test suites, if any
ifeq ($(strip $(wildcard tests/*.h)),)
test:
clean_testrunners:
else
ifeq ($(CXXTEST),NONE)
.PHONY: warn_no_cxxtest
test: warn_no_cxxtest
warn_no_cxxtest:
	@echo Warning: Skipping unit testing since CxxTest is not installed.
clean_testrunners:
else
test: run_testsuites
CXXTEST_SUITES=$(wildcard tests/*.h)
CXXTEST_RUNNERS=$(patsubst %.h,%,$(CXXTEST_SUITES))
CXXTEST_RUNNERS_CC=$(patsubst %.h,%.cc,$(CXXTEST_SUITES))
CXXTEST_RUNNERS_O=$(patsubst %.h,%.o,$(CXXTEST_SUITES))
run_testsuites: $(addprefix run_,$(CXXTEST_RUNNERS))
clean_testrunners:
	$(RM) $(CXXTEST_RUNNERS) $(CXXTEST_RUNNERS_O) $(CXXTEST_RUNNERS_CC) tests/cxxtestrunner{,.o,.cc}
.PHONY: run_tests/%
run_tests/%: tests/%
	$<
$(CXXTEST_RUNNERS_CC): %.cc: %.h
	cxxtestgen.pl --error-printer -o $@ $<
endif
endif

# Compile and execute legacy tests, if any
run_%: % tests/data/%.out.txt FORCE
	./$* 2>&1 | diff tests/data/$*.out.txt -
legacy_%: tests/legacy/% tests/data/%.out.txt FORCE
	$< 2>&1 | diff tests/data/$*.out.txt -
LEGACY_TESTS_SOURCES=$(wildcard tests/legacy/*.cc)
LEGACY_TESTS=$(basename $(LEGACY_TESTS_SOURCES))
test: $(foreach legacy_test, $(notdir $(LEGACY_TESTS)), legacy_$(legacy_test))

# Rules for compiling programs, saving inferred dependencies at the same time
%.o: %.cc
	@test -d .deps || mkdir -p .deps
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -MT $@ -MMD -MP -MF .deps/$(subst /,__,$*).Td
	@mv -f .deps/$(subst /,__,$*).Td .deps/$(subst /,__,$*).d

# Load up any dependencies thus previously saved.
-include .deps/*.d

# make programs, linking to library if there is one, else to all object files
bin: $(PROGRAMS) $(DYNPROGS)
ifdef LIBRARY
$(PROGRAMS) $(CXXTEST_RUNNERS) $(LEGACY_TESTS): %: %.o $(LIBRARY).a $(foreach DIR, $(LIB_LIST), ../$(DIR)/libportage_$(DIR).a)
	$(CXX) $(LINKFLAGS) -o $@ $< $(LIBRARY).a $(LINKWITH) $(DYNLIBS)
$(DYNPROGS): %: %.o $(LIBRARY).so $(foreach DIR, $(LIB_LIST), ../$(DIR)/libportage_$(DIR).so)
	$(CXX) $(LINKFLAGS) -o $@ $< $(LIBRARY).so $(LIBS) $(DYNLIBS)
else
$(PROGRAMS) $(CXXTEST_RUNNERS) $(LEGACY_TESTS): %: %.o $(OBJECTS) $(foreach DIR, $(LIB_LIST), ../$(DIR)/libportage_$(DIR).a)
	$(CXX) $(LINKFLAGS) -o $@ $(OBJECTS) $< $(LINKWITH) $(DYNLIBS)
$(DYNPROGS): %: %.o $(OBJECTS) $(foreach DIR, $(LIB_LIST), ../$(DIR)/libportage_$(DIR).so)
	$(CXX) $(LINKFLAGS) -o $@ $(OBJECTS) $< $(LIBS) $(DYNLIBS)
endif

# make tags for finding various definitions in vi and related editors
tags:
ifdef SOURCES
    ifndef PORTAGE_NO_CTAGS
        # Can be niced in the background - compilation need not wait for this
	nice ctags $(INCLUDES) $(SOURCES) &
    endif
endif

# make tags for finding various definitions in emacs and related editors
TAGS:
ifdef SOURCES
    ifndef PORTAGE_NO_ETAGS
        # Can be niced in the background - compilation need not wait for this
	nice etags -C $(INCLUDES) $(SOURCES) &
    endif
endif

# make info doc files
info: $(INFOFILES)
$(INFOFILES): %.info: %.texinfo
	makeinfo --fill-column=70 $<

# make doxygen documentation
doxy: $(DOXYFILE)
ifdef DOXYFILE
ifneq ($(OSTYPE),Darwin)
	doxygen $^
endif
endif

# latex stuff
ifeq ($(MYLATEX),NONE)
docs:
else
docs: $(DOCUMENTS)

$(DOCUMENTS): %.pdf: %.dvi
	dvipdf $^ $@

%.dvi: %.tex
	$(MYLATEX) $*
	-bibtex $*
	$(MYLATEX) $*
	$(MYLATEX) $*
endif

install_inc: $(INCLUDES)
ifdef INCLUDES
	install -d -m0750 $(INC_DIR)
	install -p -m0640 $(INCLUDES) $(INC_DIR)
endif

install_dyn_lib: dyn_lib
ifdef LIBRARY
ifneq ($(OSTYPE),Darwin)
	install -d -m0750 $(LIB_DIR)
	install -p -m0750 $(LIBRARY).so $(LIB_DIR)
endif
endif

install_static_lib: lib
ifdef LIBRARY
	install -d -m0750 $(LIB_DIR)
	install -p -m0640 $(LIBRARY).a $(LIB_DIR)
endif

ifeq ($(OSTYPE),CYGWIN)
    # Under Cygwin, the -p option to install to broken with files that
    # automagically get the .exe extension.
    INST_EX=install -s
else
    INST_EX=install -ps
endif

install_bin: $(PROGRAMS) $(DYNPROGS) $(BINSCRIPTS)
ifdef PROGRAMS
    # only call install if PROGRAMS\TESTPROGS is non-empty
    ifneq ($(strip $(filter-out $(TESTPROGS), $(PROGRAMS))),)
	install -d -m0750 $(BIN_DIR)
	$(INST_EX) -m0750 $(filter-out $(TESTPROGS), $(PROGRAMS)) $(BIN_DIR)
    endif
endif
ifdef DYNPROGS
	install -d -m0750 $(BIN_DIR)
	$(INST_EX) -m0750 $(filter-out $(TESTPROGS), $(DYNPROGS)) $(BIN_DIR)
endif
ifdef BINSCRIPTS
	install -d -m0750 $(BIN_DIR)
	install -p -m0750 $(BINSCRIPTS) $(BIN_DIR)
endif

install_doc: $(INFOFILES) $(DOCUMENTS)
ifdef INFOFILES
	install -d -m0750 $(DOC_DIR)
	install -p -m0640 $(INFOFILES) $(DOC_DIR)
endif
ifdef DOCUMENTS
	install -d -m0750 $(DOC_DIR)
	install -p -m0640 $(DOCUMENTS) $(DOC_DIR)
endif

install_perl_lib: $(PERL_LIBS)
ifdef PERL_LIBS
	install -d -m0750 $(PERL_LIB_DIR)
	install -p -m0640 $(PERL_LIBS) $(PERL_LIB_DIR)
endif


# This next section is to generate web pages from the programs help message.

# Indicates where the web pages should reside.
USAGE_DIR ?= ../../doc/usage

MODULE_NAME = $(notdir ${CURDIR})

# Since we are building pages for a particular module, it would make sense to
# put those pages together in a directory.
MODULE_USAGE_DIR = ${USAGE_DIR}/${MODULE_NAME}

# Main alias to create the web pages.
.PHONY: usage

USAGE_PROGRAMS   = $(filter-out $(TESTPROGS), $(PROGRAMS)) ${BINSCRIPTS} $(wildcard README)

# usage: index per module of all available programs
# usage in each modules will require lib in dependent modules
usage: lib
ifeq ($(strip $(USAGE_PROGRAMS)),)
usage:
else
index.html: $(addsuffix .html,${USAGE_PROGRAMS})
usage: index.html
index.html:
	echo "$(USAGE_PROGRAMS)" \
	| tr " " "\n" \
	| sort \
	| ../utils/pgm_usage_2_html.pl -module ${MODULE_NAME} \
	> ${MODULE_USAGE_DIR}/$@
endif

# Generic target to create each program's web page.
# This target only generate help for the "normal help" aka -h.
vpath %.html ${MODULE_USAGE_DIR}
%.html: %
	install -d -m0750 ${MODULE_USAGE_DIR}
	./$* -h 2>&1 | ../utils/pgm_usage_2_html.pl -pgm ${MODULE_NAME}/$* > ${MODULE_USAGE_DIR}/$@

# Special case: a README is included verbatim in the usage page.
README.html: README
	install -d -m0750 ${MODULE_USAGE_DIR}
	cat README | ../utils/pgm_usage_2_html.pl -pgm ${MODULE_NAME}/README > ${MODULE_USAGE_DIR}/$@

# This is a special target for programs that also have the alternative help
# message aka -H.
# Please list your programs with alternative help message into the varaible
# PGM_WITH_EXTRA_HELP in each of the modules.
ifdef PGM_WITH_ALTERNATIVE_HELP
$(addsuffix .html,${PGM_WITH_ALTERNATIVE_HELP}): %.html: %
	install -d -m0750 ${MODULE_USAGE_DIR}
	(./$* -h; echo "NRC_HELP_SEPARATOR_TAG"; ./$* -H) 2>&1 | ../utils/pgm_usage_2_html.pl -pgm ${MODULE_NAME}/$* > ${MODULE_USAGE_DIR}/$@
endif

# How to clean the web pages.
.PHONY: clean_usage
clean_usage:
	${RM} ${MODULE_USAGE_DIR}/*.html


# -----------------------------------------------------------------------------
# This is not very sophisticated. Some (of the many) assumptions and
# limitations:
# - It's mostly for C++. Plain C files are compiled to object as C source, but
#   are linked into programs as C++; this doesn't seem to cause problems.
# - All programs are assumed to depend on ALL object files, and are linked to a
#   library if one is being built, otherwise to all objects. This can cause
#   make all's to be slower than necessary, and, if no library is being built,
#   can cause programs to be bigger than necessary.
# - If some targets need special treatment, you can override the rules here
#   with ones given later in the local file. This will provoke warnings from
#   make, but they're harmless. If that bugs you, you have two options:
#   follow the baroque instructions for overriding makefiles in make's info
#   doc (node  Makefiles/Overriding Makefiles); or just remove the target
#   from the general list and duplicate any targets you need from here.
# -----------------------------------------------------------------------------

# vim:sw=4:
