#!/bin/bash
# $Id$

# @file sentsplit_plugin
# @brief This script is provided as an example of sentsplit_plugin script, as
#        well as a default one.
#
# @author Eric Joanis
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2012, Sa Majeste la Reine du Chef du Canada /
# Copyright 2012, Her Majesty in Right of Canada


## 
## Usage: sentsplit_plugin SRC_LANG < in > out
## 
## Default sentence splitting plugin: to be called immediately prior to
## tokenizing but after preprocess_plugin.  Important: must only perform
## sentence splitting.
##
## The input to this script is strictly defined as one paragraph per line.  You
## must not join consecutive lines.  The output must be one sentence per line,
## with an extra blank line at the end of each paragraph.
##
## Warning: currently, the sent split plugin is only used by translate.pl if the
## source language is not one of "en", "fr", "es", or "da", the languages
## supported by utokenize.pl.
##

if [ "$1" == "-help" -o "$1" == "-h" ]; then
    cat $0 | grep "^##" | cut -c4-
    exit 1
fi

test $# -eq 0 && echo "Missing language code argument" >&2 && exit 1
SOURCE_LANGUAGE=$1; shift

if [[ "$SOURCE_LANGUAGE" == "ch" ]]; then
   perl -ple 'BEGIN{use encoding "UTF-8";} s/(\.\.\.\.\.\.|\.\.\.|\x{2026}{1,2}|\x2E|\x{FF0E}|\x3F|\x{FF1F}|\x21|\x{FF01}|\x{3002}|\x{FF61})/$1\n/g; s/\n*$/\n/;'

#elif [[ "SOURCE_LANGUAGE" == "xy" ]]; then
   # insert code or call program to do sentence splitting for language "xy"
   # here, reading STDIN and writing to STDOUT.

elif [ "$SOURCE_LANGUAGE" == "fr" -o "$SOURCE_LANGUAGE" == "en" -o "$SOURCE_LANGUAGE" == "es" -o "$SOURCE_LANGUAGE" == "da" ]; then
   echo "Language $SOURCE_LANGUAGE is supported by utokenize.pl, don't use the plugin" >&2
   exit 1

else
   echo "Unsupported language: $SOURCE_LANGUAGE" >&2
   exit 1

fi
