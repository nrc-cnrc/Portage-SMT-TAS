#!/bin/bash

# @file tokenize_plugin
# @brief This script is provided as an example of tokenize_plugin script, as
#        well as a default one.
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2012, Sa Majeste la Reine du Chef du Canada /
# Copyright 2012, Her Majesty in Right of Canada


## 
## Usage: tokenize_plugin SRC_LANG < in > out
## 
## Default tokenize plugin: to be called immediately prior to lowercasing
## but after preprocess_plugin and sentence splitting.  Important: must only
## perform tokenisation, not sentence splitting.
##
## Warning: currently, the tokenize plugin is only used by translate.pl if the
## source language is not one of "en", "fr", or "es", the languages supported by
## utokenize.pl.
##

if [ "$1" == "-help" -o "$1" == "-h" ]; then
    cat $0 | grep "^##" | cut -c4-
    exit 1
fi

test $# -eq 0 && echo "Missing language code argument" >&2 && exit 1
SOURCE_LANGUAGE=$1; shift

if [[ "$SOURCE_LANGUAGE" == "ch" ]]; then
   chinese_segmenter.pl
   # To use ICTCLAS, comment out chinese_segmenter.pl above, and uncomment the following:
   #set -o pipefail
   #iconv -c -f UTF-8 -t CN-GB |
   #   ictclas_preprocessing.pl |
   #   ictclas |
   #   ictclas_postprocessing.pl |
   #   iconv -c -f CN-GB -t UTF-8

#elif [[ "$SOURCE_LANGUAGE" == "xy" ]]; then
   # insert code or call program to tokenize text in language "xy" here,
   # reading STDIN and writing to STDOUT.

elif [ "$SOURCE_LANGUAGE" == "fr" -o "$SOURCE_LANGUAGE" == "en" -o "$SOURCE_LANGUAGE" == "es" ]; then
   echo "Language $SOURCE_LANGUAGE is supported by utokenize.pl, don't use the plugin" >&2
   exit 1

else
   echo "Unsupported language: $SOURCE_LANGUAGE" >&2
   exit 1

fi
