# @file Makefile.user-conf
# @brief User-configurable building parameters for PortageII
# @author Eric Joanis
#
# Traitement multilingue de textes / Multilingual Text Processing
# Technologies de l'information et des communications /
#    Information and Communications Technologies
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2008-2015, Sa Majeste la Reine du Chef du Canada /
# Copyright 2008-2015, Her Majesty in Right of Canada


# This file contains all the user-configurable variables used to build
# PortageII.  It needs to be modified to indicate where various packages
# are located and, in the case of optinal dependencies, whether their use is
# desired.  All variables in this file can also be exported as environment
# variables or specified on the make command line, e.g., to override some
# values temporarily.

# If you haven't already done so, you should set the PORTAGE variable in
# SETUP.bash/tcsh and source the appropriate file for your shell before trying
# to compile or use PortageII.



# =============================================================================
# REQUIRED PACKAGES - you need to install these dependencies and adjust the
# following variables appropriately to build PortageII.

# ------------------------------------
# Variable:        BOOST_ROOT
# Possible values: Full path to the directory where boost is installed.
#                  $BOOST_ROOT/lib will be added to the library search path
#                  for linking, and $BOOST_ROOT/include/boost-<version>
#                  will be added to the include search path for compiling.
# Notes:           Uncomment and edit this line to tell the compiler where
#                  to find boost if it is not in a standard location.

BOOST_ROOT ?= ${PORTAGE}/third-party/boost




# =============================================================================
# OPTIONAL PACKAGES - installing these dependencies enables some optional
# functionalities in PortageII.

# ------------------------------------
# Variable:        ICU
# Possible values: "NONE": Do not use ICU, or unicode-compliant casemapping.
#                  Empty or undefined: Use ICU, which is installed in a
#                  standard location.
#                  /full/path/to/icu: Use ICU, looking for its include files in
#                  $(ICU)/include, and its libraries in $(ICU)/lib.  In this
#                  case, you will also need to make sure the environment
#                  variable $LD_LIBRARY_PATH includes $(ICU)/lib.
# Notes:           Comment out the ICU?=NONE line below to enable Unicode-
#                  compliant casemapping in PortageII.  Requires ICU.
#                  Uncomment and edit the next line if needed.

#ICU ?= NONE
ICU ?= $(PORTAGE)/third-party/icu

# ------------------------------------
# Variable:        CXXTEST
# Possible values: Specifies where CxxTest is installed.
# Notes:           "make test" will fail unless CxxTest in installed, but
#                  compilation of PortageII will not be affected.
#                  Set this value so that $(CXXTEST)/bin/cxxtestgen and
#                  $(CXXTEST)/cxxtest/*.h exist.
#                  CXXTEST_HOME is a standard altenative name for setting the
#                  path to cxxtext via your environment.

#CXXTEST ?= NONE
CXXTEST_HOME ?= $(PORTAGE)/third-party/cxxtest-4.4
CXXTEST ?= $(CXXTEST_HOME)

# ------------------------------------
# Variable:        PORTAGE_OPENMP
# Possible values: specifies the compiler flag to enable OpenMP
#                  (requires g++ 4.2 or more recent)
# Notes:           Comment this line out to disable multi-threading, currently
#                  only used by rescore_train.  (Other programs are
#                  parallelized via our various *-parallel.sh scripts).

PORTAGE_OPENMP ?= -fopenmp

# ------------------------------------
# Variable:        LOG4CXX
# Possible values: "NONE" disables logging.
#                  Any other value or undefined enables logging.
#                  Empty or undefined: enable logging, assuming log4cxx is
#                  installed in a standard location.
#                  /full/path/to/log4cxx: enable logging, looking for log4cxx
#                  includes in $LOG4CXX/include/log4cxx and log4cxx libraries
#                  in $LOG4CXX/lib.
# Notes:           Comment out this line to enable logging.  Requires log4cxx.
#                  Uncomment and edit the next line if needed.

LOG4CXX ?= NONE
#LOG4CXX = $(PORTAGE)/third-party/log4cxx

# ------------------------------------
# Variable:        PORTAGE_CTAGS
# Possible values: defined to any non-blank value turns on the use of ctags
# Notes:           Uncomment this line if you have the ctags program and want
#                  to use tags in vi or a related editor.  Equivalently, you
#                  can export/setenv PORTAGE_CTAGS to 1 in your .<shell>rc file
#                  to enable the use of etags.

#PORTAGE_CTAGS?=1

# ------------------------------------
# Variable:        PORTAGE_ETAGS
# Possible values: defined to any non-blank value turns on the use of etags
# Notes:           Uncomment this line if you have the etags program and want
#                  to use tags in emacs or a related editor.  Equivalently, you
#                  can export/setenv PORTAGE_ETAGS to 1 in your .<shell>rc file
#                  to enable the use of etags.

#PORTAGE_ETAGS?=1

# ------------------------------------
# Variable:        MYLATEX
# Possible values: the command line for invoking latex, or "NONE" to disable
#                  the compilation of documents
# Notes:           Uncomment the "MYLATEX = NONE" line if you don't have latex.

MYLATEX ?= latex -interaction=batchmode
#MYLATEX = NONE

# ------------------------------------
# Variable:        HAS_LZMA
# Possible values: NONE or we will attempt to autodetect the presence of lzma.
# Notes:           Uncomment the "HAS_LZMA := NONE" line if you don't want to
#                  support lzma in Portage.

HAS_LZMA := $(or $(shell test -x "`which lzma 2> /dev/null`" && echo USER-DEFINED), NONE)
#HAS_LZMA := NONE

# ------------------------------------
# Variable:        TCMALLOC
# Possible values: Where TCMalloc/google-perftools is installed, or
#                  "NONE" or undefined to disable using TCMalloc.
# Notes:           TCMalloc provides faster memory allocation than the default
#                  malloc on some systems

#TCMALLOC ?= NONE
TCMALLOC ?= $(PORTAGE)/third-party/gperftools

# ------------------------------------
# Variable:        GOOGLE_PROFILER
# Possible values: Where the Google profiler (google-perftools) is installed,
#                  or "NONE" or undefined to disable using it.
# Notes:           Used only for development purposes.

#GOOGLE_PROFILER ?= NONE
GOOGLE_PROFILER ?= $(PORTAGE)/third-party/gperftools
